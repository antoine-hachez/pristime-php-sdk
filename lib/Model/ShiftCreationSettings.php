<?php
/**
 * ShiftCreationSettings
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules using Mixed Integer Programming (MIP).          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShiftCreationSettings Class Doc Comment
 *
 * @category Class
 * @description Configuration for automatically creating shifts to fulfill staffing demands.  When a demand cannot be fully satisfied by existing shifts, the system can automatically generate new shifts with these specifications. This is useful for:  - **Dynamic scheduling**: Create shifts on-demand based on actual staffing needs - **Gap filling**: Generate shifts to cover periods with insufficient existing coverage - **Uniform coverage**: Ensure consistent shift characteristics across time periods - **Skill-specific coverage**: Create shifts that require specific worker qualifications  **Important:** All created shifts must be compatible with the parent demand&#39;s requirements. For example, if the demand requires shifts with tag \&quot;ICU\&quot;, the shift creation settings must include \&quot;ICU\&quot; in their tags.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShiftCreationSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShiftCreationSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timezone' => 'string',
        'required_skills' => 'string[]',
        'tags' => 'string[]',
        'day_boundary_offset_minutes' => 'int',
        'break_minutes' => 'int',
        'work_duration' => '\OpenAPI\Client\Model\WorkDuration',
        'continuous_work_duration_before_break' => '\OpenAPI\Client\Model\ContinuousWorkDurationBeforeBreak'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timezone' => null,
        'required_skills' => null,
        'tags' => null,
        'day_boundary_offset_minutes' => null,
        'break_minutes' => null,
        'work_duration' => null,
        'continuous_work_duration_before_break' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timezone' => false,
        'required_skills' => false,
        'tags' => false,
        'day_boundary_offset_minutes' => false,
        'break_minutes' => false,
        'work_duration' => false,
        'continuous_work_duration_before_break' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timezone' => 'timezone',
        'required_skills' => 'required_skills',
        'tags' => 'tags',
        'day_boundary_offset_minutes' => 'day_boundary_offset_minutes',
        'break_minutes' => 'break_minutes',
        'work_duration' => 'work_duration',
        'continuous_work_duration_before_break' => 'continuous_work_duration_before_break'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timezone' => 'setTimezone',
        'required_skills' => 'setRequiredSkills',
        'tags' => 'setTags',
        'day_boundary_offset_minutes' => 'setDayBoundaryOffsetMinutes',
        'break_minutes' => 'setBreakMinutes',
        'work_duration' => 'setWorkDuration',
        'continuous_work_duration_before_break' => 'setContinuousWorkDurationBeforeBreak'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timezone' => 'getTimezone',
        'required_skills' => 'getRequiredSkills',
        'tags' => 'getTags',
        'day_boundary_offset_minutes' => 'getDayBoundaryOffsetMinutes',
        'break_minutes' => 'getBreakMinutes',
        'work_duration' => 'getWorkDuration',
        'continuous_work_duration_before_break' => 'getContinuousWorkDurationBeforeBreak'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BREAK_MINUTES_NUMBER_30 = 30;
    public const BREAK_MINUTES_NUMBER_60 = 60;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBreakMinutesAllowableValues()
    {
        return [
            self::BREAK_MINUTES_NUMBER_30,
            self::BREAK_MINUTES_NUMBER_60,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('required_skills', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('day_boundary_offset_minutes', $data ?? [], 0);
        $this->setIfExists('break_minutes', $data ?? [], null);
        $this->setIfExists('work_duration', $data ?? [], null);
        $this->setIfExists('continuous_work_duration_before_break', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['break_minutes'] === null) {
            $invalidProperties[] = "'break_minutes' can't be null";
        }
        $allowedValues = $this->getBreakMinutesAllowableValues();
        if (!is_null($this->container['break_minutes']) && !in_array($this->container['break_minutes'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'break_minutes', must be one of '%s'",
                $this->container['break_minutes'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['work_duration'] === null) {
            $invalidProperties[] = "'work_duration' can't be null";
        }
        if ($this->container['continuous_work_duration_before_break'] === null) {
            $invalidProperties[] = "'continuous_work_duration_before_break' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone for all automatically created shifts. Should typically match the demand's timezone and your business location.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets required_skills
     *
     * @return string[]|null
     */
    public function getRequiredSkills()
    {
        return $this->container['required_skills'];
    }

    /**
     * Sets required_skills
     *
     * @param string[]|null $required_skills Skills, certifications, or qualifications required for workers to be assigned to created shifts. Must be a superset of the demand's required_skills.
     *
     * @return self
     */
    public function setRequiredSkills($required_skills)
    {
        if (is_null($required_skills)) {
            throw new \InvalidArgumentException('non-nullable required_skills cannot be null');
        }


        $this->container['required_skills'] = $required_skills;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Descriptive tags that will be applied to all created shifts. Must be a superset of the demand's required_shift_tags to ensure compatibility.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }


        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets day_boundary_offset_minutes
     *
     * @return int|null
     */
    public function getDayBoundaryOffsetMinutes()
    {
        return $this->container['day_boundary_offset_minutes'];
    }

    /**
     * Sets day_boundary_offset_minutes
     *
     * @param int|null $day_boundary_offset_minutes Day boundary adjustment for created shifts, useful for night shift operations. Positive values shift the day end later (e.g., +120 = day ends at 2:00 AM).
     *
     * @return self
     */
    public function setDayBoundaryOffsetMinutes($day_boundary_offset_minutes)
    {
        if (is_null($day_boundary_offset_minutes)) {
            throw new \InvalidArgumentException('non-nullable day_boundary_offset_minutes cannot be null');
        }
        $this->container['day_boundary_offset_minutes'] = $day_boundary_offset_minutes;

        return $this;
    }

    /**
     * Gets break_minutes
     *
     * @return int
     */
    public function getBreakMinutes()
    {
        return $this->container['break_minutes'];
    }

    /**
     * Sets break_minutes
     *
     * @param int $break_minutes Duration in minutes for break periods that will be automatically added to created shifts. Breaks are unpaid time subtracted from work hours.
     *
     * @return self
     */
    public function setBreakMinutes($break_minutes)
    {
        if (is_null($break_minutes)) {
            throw new \InvalidArgumentException('non-nullable break_minutes cannot be null');
        }
        $allowedValues = $this->getBreakMinutesAllowableValues();
        if (!in_array($break_minutes, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'break_minutes', must be one of '%s'",
                    $break_minutes,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['break_minutes'] = $break_minutes;

        return $this;
    }

    /**
     * Gets work_duration
     *
     * @return \OpenAPI\Client\Model\WorkDuration
     */
    public function getWorkDuration()
    {
        return $this->container['work_duration'];
    }

    /**
     * Sets work_duration
     *
     * @param \OpenAPI\Client\Model\WorkDuration $work_duration work_duration
     *
     * @return self
     */
    public function setWorkDuration($work_duration)
    {
        if (is_null($work_duration)) {
            throw new \InvalidArgumentException('non-nullable work_duration cannot be null');
        }
        $this->container['work_duration'] = $work_duration;

        return $this;
    }

    /**
     * Gets continuous_work_duration_before_break
     *
     * @return \OpenAPI\Client\Model\ContinuousWorkDurationBeforeBreak
     */
    public function getContinuousWorkDurationBeforeBreak()
    {
        return $this->container['continuous_work_duration_before_break'];
    }

    /**
     * Sets continuous_work_duration_before_break
     *
     * @param \OpenAPI\Client\Model\ContinuousWorkDurationBeforeBreak $continuous_work_duration_before_break continuous_work_duration_before_break
     *
     * @return self
     */
    public function setContinuousWorkDurationBeforeBreak($continuous_work_duration_before_break)
    {
        if (is_null($continuous_work_duration_before_break)) {
            throw new \InvalidArgumentException('non-nullable continuous_work_duration_before_break cannot be null');
        }
        $this->container['continuous_work_duration_before_break'] = $continuous_work_duration_before_break;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


