<?php
/**
 * Demand
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules using Mixed Integer Programming (MIP).          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Demand Class Doc Comment
 *
 * @category Class
 * @description Represents staffing requirements that need to be met during scheduling optimization.  A demand specifies: - **When**: Time periods requiring staff coverage (via time_series) - **How many**: Number of workers needed at each time point - **What skills**: Required qualifications for workers and shifts - **How to fulfill**: Optional shift creation settings for automatic coverage  **Time Series Format:** Demands use a time series to specify changing staffing needs over time. Each entry represents a change point where the required staffing level changes. Example: {9:00 AM: 3, 1:00 PM: 2, 5:00 PM: 0} means: - 3 workers needed from 9:00 AM to 1:00 PM - 2 workers needed from 1:00 PM to 5:00 PM - 0 workers needed after 5:00 PM  **Automatic Shift Creation:** When shift_creation_settings are provided, the system can automatically generate shifts to meet this demand if existing shifts are insufficient.  **Revenue Optimization:** Demand fulfillment generates revenue in the optimization algorithm, encouraging the system to prioritize meeting high-value staffing requirements.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Demand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Demand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'label' => 'string',
        'time_series' => 'array<string,float>',
        'upper_limit_increment' => 'int',
        'timezone' => 'string',
        'required_skills' => 'string[]',
        'required_tags' => 'string[]',
        'revenues' => 'object',
        'shift_creation_settings' => '\OpenAPI\Client\Model\ShiftCreationSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'label' => null,
        'time_series' => null,
        'upper_limit_increment' => null,
        'timezone' => null,
        'required_skills' => null,
        'required_tags' => null,
        'revenues' => null,
        'shift_creation_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'label' => true,
        'time_series' => false,
        'upper_limit_increment' => true,
        'timezone' => false,
        'required_skills' => false,
        'required_tags' => false,
        'revenues' => false,
        'shift_creation_settings' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'time_series' => 'time_series',
        'upper_limit_increment' => 'upper_limit_increment',
        'timezone' => 'timezone',
        'required_skills' => 'required_skills',
        'required_tags' => 'required_tags',
        'revenues' => 'revenues',
        'shift_creation_settings' => 'shift_creation_settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'time_series' => 'setTimeSeries',
        'upper_limit_increment' => 'setUpperLimitIncrement',
        'timezone' => 'setTimezone',
        'required_skills' => 'setRequiredSkills',
        'required_tags' => 'setRequiredTags',
        'revenues' => 'setRevenues',
        'shift_creation_settings' => 'setShiftCreationSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'time_series' => 'getTimeSeries',
        'upper_limit_increment' => 'getUpperLimitIncrement',
        'timezone' => 'getTimezone',
        'required_skills' => 'getRequiredSkills',
        'required_tags' => 'getRequiredTags',
        'revenues' => 'getRevenues',
        'shift_creation_settings' => 'getShiftCreationSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('time_series', $data ?? [], null);
        $this->setIfExists('upper_limit_increment', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('required_skills', $data ?? [], null);
        $this->setIfExists('required_tags', $data ?? [], null);
        $this->setIfExists('revenues', $data ?? [], null);
        $this->setIfExists('shift_creation_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['required_skills'] === null) {
            $invalidProperties[] = "'required_skills' can't be null";
        }
        if ($this->container['required_tags'] === null) {
            $invalidProperties[] = "'required_tags' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Your system's unique identifier for this demand (e.g., department ID, location ID, event ID).
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets time_series
     *
     * @return array<string,float>|null
     */
    public function getTimeSeries()
    {
        return $this->container['time_series'];
    }

    /**
     * Sets time_series
     *
     * @param array<string,float>|null $time_series Staffing level requirements over time as change points. Each entry specifies when the required number of workers changes. Format: {timestamp: worker_count}. The last entry must be 0 to indicate demand end.
     *
     * @return self
     */
    public function setTimeSeries($time_series)
    {
        if (is_null($time_series)) {
            throw new \InvalidArgumentException('non-nullable time_series cannot be null');
        }
        $this->container['time_series'] = $time_series;

        return $this;
    }

    /**
     * Gets upper_limit_increment
     *
     * @return int|null
     */
    public function getUpperLimitIncrement()
    {
        return $this->container['upper_limit_increment'];
    }

    /**
     * Sets upper_limit_increment
     *
     * @param int|null $upper_limit_increment upper_limit_increment
     *
     * @return self
     */
    public function setUpperLimitIncrement($upper_limit_increment)
    {
        if (is_null($upper_limit_increment)) {
            array_push($this->openAPINullablesSetToNull, 'upper_limit_increment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upper_limit_increment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upper_limit_increment'] = $upper_limit_increment;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone for interpreting the demand time series and any automatically created shifts. Should match your local business timezone.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets required_skills
     *
     * @return string[]
     */
    public function getRequiredSkills()
    {
        return $this->container['required_skills'];
    }

    /**
     * Sets required_skills
     *
     * @param string[] $required_skills Skills, certifications, or qualifications that workers must possess to fulfill this demand. Only workers with all these skills will be considered.
     *
     * @return self
     */
    public function setRequiredSkills($required_skills)
    {
        if (is_null($required_skills)) {
            throw new \InvalidArgumentException('non-nullable required_skills cannot be null');
        }


        $this->container['required_skills'] = $required_skills;

        return $this;
    }

    /**
     * Gets required_tags
     *
     * @return string[]
     */
    public function getRequiredTags()
    {
        return $this->container['required_tags'];
    }

    /**
     * Sets required_tags
     *
     * @param string[] $required_tags Tags that shifts must have to count toward fulfilling this demand. Useful for matching specific shift types, locations, or characteristics.
     *
     * @return self
     */
    public function setRequiredTags($required_tags)
    {
        if (is_null($required_tags)) {
            throw new \InvalidArgumentException('non-nullable required_tags cannot be null');
        }


        $this->container['required_tags'] = $required_tags;

        return $this;
    }

    /**
     * Gets revenues
     *
     * @return object|null
     */
    public function getRevenues()
    {
        return $this->container['revenues'];
    }

    /**
     * Sets revenues
     *
     * @param object|null $revenues revenues
     *
     * @return self
     */
    public function setRevenues($revenues)
    {
        if (is_null($revenues)) {
            throw new \InvalidArgumentException('non-nullable revenues cannot be null');
        }
        $this->container['revenues'] = $revenues;

        return $this;
    }

    /**
     * Gets shift_creation_settings
     *
     * @return \OpenAPI\Client\Model\ShiftCreationSettings|null
     */
    public function getShiftCreationSettings()
    {
        return $this->container['shift_creation_settings'];
    }

    /**
     * Sets shift_creation_settings
     *
     * @param \OpenAPI\Client\Model\ShiftCreationSettings|null $shift_creation_settings shift_creation_settings
     *
     * @return self
     */
    public function setShiftCreationSettings($shift_creation_settings)
    {
        if (is_null($shift_creation_settings)) {
            array_push($this->openAPINullablesSetToNull, 'shift_creation_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shift_creation_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shift_creation_settings'] = $shift_creation_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


