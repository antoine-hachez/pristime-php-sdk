<?php
/**
 * PeriodMetrics
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PeriodMetrics Class Doc Comment
 *
 * @category Class
 * @description Time tracking and account balances for a worker over a specific period.  This class captures both planned and actual time allocations during a contract period, enabling accurate payroll calculation, labor compliance monitoring, and optimization accounting. Values are typically set from existing schedules or time tracking systems.  **Time Categories:**  **Planning Values (what was intended):** - expected_time: Guaranteed hours the worker should receive - overtime: Premium hours planned beyond regular contract  **Actual Values (what was scheduled/worked):** - assigned_time: Productive work hours actually assigned - recovered_time: Overtime taken as paid time off instead of cash - pto_time: Vacation, sick leave, or other paid time off used  **Flextime Tracking (time debt/credit):** - flextime_positive: Extra hours worked above contract (time credit) - flextime_negative: Hours below contract that need to be made up (time debt) - flextime_balance: Running total of accumulated flextime  **Activity Counting:** - active_days: Days with any scheduled time (work, PTO, recovery) - expected_days: Days with guaranteed contract hours  Values are automatically calculated by the system and used for constraint validation and cost calculations during optimization.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PeriodMetrics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PeriodMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'expected_time_minutes' => 'int',
        'overtime_minutes' => 'int',
        'assigned_time_minutes' => 'int',
        'recovered_time_minutes' => 'int',
        'pto_time_minutes' => 'int',
        'flextime_negative_minutes' => 'int',
        'flextime_positive_minutes' => 'int',
        'flextime_balance_minutes' => 'int',
        'active_days' => 'int',
        'expected_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'expected_time_minutes' => null,
        'overtime_minutes' => null,
        'assigned_time_minutes' => null,
        'recovered_time_minutes' => null,
        'pto_time_minutes' => null,
        'flextime_negative_minutes' => null,
        'flextime_positive_minutes' => null,
        'flextime_balance_minutes' => null,
        'active_days' => null,
        'expected_days' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'expected_time_minutes' => true,
        'overtime_minutes' => true,
        'assigned_time_minutes' => true,
        'recovered_time_minutes' => true,
        'pto_time_minutes' => true,
        'flextime_negative_minutes' => true,
        'flextime_positive_minutes' => true,
        'flextime_balance_minutes' => true,
        'active_days' => true,
        'expected_days' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expected_time_minutes' => 'expected_time_minutes',
        'overtime_minutes' => 'overtime_minutes',
        'assigned_time_minutes' => 'assigned_time_minutes',
        'recovered_time_minutes' => 'recovered_time_minutes',
        'pto_time_minutes' => 'pto_time_minutes',
        'flextime_negative_minutes' => 'flextime_negative_minutes',
        'flextime_positive_minutes' => 'flextime_positive_minutes',
        'flextime_balance_minutes' => 'flextime_balance_minutes',
        'active_days' => 'active_days',
        'expected_days' => 'expected_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expected_time_minutes' => 'setExpectedTimeMinutes',
        'overtime_minutes' => 'setOvertimeMinutes',
        'assigned_time_minutes' => 'setAssignedTimeMinutes',
        'recovered_time_minutes' => 'setRecoveredTimeMinutes',
        'pto_time_minutes' => 'setPtoTimeMinutes',
        'flextime_negative_minutes' => 'setFlextimeNegativeMinutes',
        'flextime_positive_minutes' => 'setFlextimePositiveMinutes',
        'flextime_balance_minutes' => 'setFlextimeBalanceMinutes',
        'active_days' => 'setActiveDays',
        'expected_days' => 'setExpectedDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expected_time_minutes' => 'getExpectedTimeMinutes',
        'overtime_minutes' => 'getOvertimeMinutes',
        'assigned_time_minutes' => 'getAssignedTimeMinutes',
        'recovered_time_minutes' => 'getRecoveredTimeMinutes',
        'pto_time_minutes' => 'getPtoTimeMinutes',
        'flextime_negative_minutes' => 'getFlextimeNegativeMinutes',
        'flextime_positive_minutes' => 'getFlextimePositiveMinutes',
        'flextime_balance_minutes' => 'getFlextimeBalanceMinutes',
        'active_days' => 'getActiveDays',
        'expected_days' => 'getExpectedDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('expected_time_minutes', $data ?? [], null);
        $this->setIfExists('overtime_minutes', $data ?? [], null);
        $this->setIfExists('assigned_time_minutes', $data ?? [], null);
        $this->setIfExists('recovered_time_minutes', $data ?? [], null);
        $this->setIfExists('pto_time_minutes', $data ?? [], null);
        $this->setIfExists('flextime_negative_minutes', $data ?? [], null);
        $this->setIfExists('flextime_positive_minutes', $data ?? [], null);
        $this->setIfExists('flextime_balance_minutes', $data ?? [], null);
        $this->setIfExists('active_days', $data ?? [], null);
        $this->setIfExists('expected_days', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['expected_time_minutes']) && ($this->container['expected_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'expected_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['overtime_minutes']) && ($this->container['overtime_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'overtime_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['assigned_time_minutes']) && ($this->container['assigned_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'assigned_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['recovered_time_minutes']) && ($this->container['recovered_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'recovered_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pto_time_minutes']) && ($this->container['pto_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'pto_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['flextime_negative_minutes']) && ($this->container['flextime_negative_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'flextime_negative_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['flextime_positive_minutes']) && ($this->container['flextime_positive_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'flextime_positive_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['active_days']) && ($this->container['active_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'active_days', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['expected_days']) && ($this->container['expected_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'expected_days', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expected_time_minutes
     *
     * @return int|null
     */
    public function getExpectedTimeMinutes()
    {
        return $this->container['expected_time_minutes'];
    }

    /**
     * Sets expected_time_minutes
     *
     * @param int|null $expected_time_minutes expected_time_minutes
     *
     * @return self
     */
    public function setExpectedTimeMinutes($expected_time_minutes)
    {
        if (is_null($expected_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'expected_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expected_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($expected_time_minutes) && ($expected_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $expected_time_minutes when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['expected_time_minutes'] = $expected_time_minutes;

        return $this;
    }

    /**
     * Gets overtime_minutes
     *
     * @return int|null
     */
    public function getOvertimeMinutes()
    {
        return $this->container['overtime_minutes'];
    }

    /**
     * Sets overtime_minutes
     *
     * @param int|null $overtime_minutes overtime_minutes
     *
     * @return self
     */
    public function setOvertimeMinutes($overtime_minutes)
    {
        if (is_null($overtime_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'overtime_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overtime_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($overtime_minutes) && ($overtime_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $overtime_minutes when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['overtime_minutes'] = $overtime_minutes;

        return $this;
    }

    /**
     * Gets assigned_time_minutes
     *
     * @return int|null
     */
    public function getAssignedTimeMinutes()
    {
        return $this->container['assigned_time_minutes'];
    }

    /**
     * Sets assigned_time_minutes
     *
     * @param int|null $assigned_time_minutes assigned_time_minutes
     *
     * @return self
     */
    public function setAssignedTimeMinutes($assigned_time_minutes)
    {
        if (is_null($assigned_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'assigned_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assigned_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($assigned_time_minutes) && ($assigned_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $assigned_time_minutes when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['assigned_time_minutes'] = $assigned_time_minutes;

        return $this;
    }

    /**
     * Gets recovered_time_minutes
     *
     * @return int|null
     */
    public function getRecoveredTimeMinutes()
    {
        return $this->container['recovered_time_minutes'];
    }

    /**
     * Sets recovered_time_minutes
     *
     * @param int|null $recovered_time_minutes recovered_time_minutes
     *
     * @return self
     */
    public function setRecoveredTimeMinutes($recovered_time_minutes)
    {
        if (is_null($recovered_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'recovered_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recovered_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($recovered_time_minutes) && ($recovered_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $recovered_time_minutes when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['recovered_time_minutes'] = $recovered_time_minutes;

        return $this;
    }

    /**
     * Gets pto_time_minutes
     *
     * @return int|null
     */
    public function getPtoTimeMinutes()
    {
        return $this->container['pto_time_minutes'];
    }

    /**
     * Sets pto_time_minutes
     *
     * @param int|null $pto_time_minutes pto_time_minutes
     *
     * @return self
     */
    public function setPtoTimeMinutes($pto_time_minutes)
    {
        if (is_null($pto_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'pto_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pto_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pto_time_minutes) && ($pto_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $pto_time_minutes when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['pto_time_minutes'] = $pto_time_minutes;

        return $this;
    }

    /**
     * Gets flextime_negative_minutes
     *
     * @return int|null
     */
    public function getFlextimeNegativeMinutes()
    {
        return $this->container['flextime_negative_minutes'];
    }

    /**
     * Sets flextime_negative_minutes
     *
     * @param int|null $flextime_negative_minutes flextime_negative_minutes
     *
     * @return self
     */
    public function setFlextimeNegativeMinutes($flextime_negative_minutes)
    {
        if (is_null($flextime_negative_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'flextime_negative_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flextime_negative_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($flextime_negative_minutes) && ($flextime_negative_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $flextime_negative_minutes when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['flextime_negative_minutes'] = $flextime_negative_minutes;

        return $this;
    }

    /**
     * Gets flextime_positive_minutes
     *
     * @return int|null
     */
    public function getFlextimePositiveMinutes()
    {
        return $this->container['flextime_positive_minutes'];
    }

    /**
     * Sets flextime_positive_minutes
     *
     * @param int|null $flextime_positive_minutes flextime_positive_minutes
     *
     * @return self
     */
    public function setFlextimePositiveMinutes($flextime_positive_minutes)
    {
        if (is_null($flextime_positive_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'flextime_positive_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flextime_positive_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($flextime_positive_minutes) && ($flextime_positive_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $flextime_positive_minutes when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['flextime_positive_minutes'] = $flextime_positive_minutes;

        return $this;
    }

    /**
     * Gets flextime_balance_minutes
     *
     * @return int|null
     */
    public function getFlextimeBalanceMinutes()
    {
        return $this->container['flextime_balance_minutes'];
    }

    /**
     * Sets flextime_balance_minutes
     *
     * @param int|null $flextime_balance_minutes flextime_balance_minutes
     *
     * @return self
     */
    public function setFlextimeBalanceMinutes($flextime_balance_minutes)
    {
        if (is_null($flextime_balance_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'flextime_balance_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flextime_balance_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flextime_balance_minutes'] = $flextime_balance_minutes;

        return $this;
    }

    /**
     * Gets active_days
     *
     * @return int|null
     */
    public function getActiveDays()
    {
        return $this->container['active_days'];
    }

    /**
     * Sets active_days
     *
     * @param int|null $active_days active_days
     *
     * @return self
     */
    public function setActiveDays($active_days)
    {
        if (is_null($active_days)) {
            array_push($this->openAPINullablesSetToNull, 'active_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($active_days) && ($active_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $active_days when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['active_days'] = $active_days;

        return $this;
    }

    /**
     * Gets expected_days
     *
     * @return int|null
     */
    public function getExpectedDays()
    {
        return $this->container['expected_days'];
    }

    /**
     * Sets expected_days
     *
     * @param int|null $expected_days expected_days
     *
     * @return self
     */
    public function setExpectedDays($expected_days)
    {
        if (is_null($expected_days)) {
            array_push($this->openAPINullablesSetToNull, 'expected_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expected_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($expected_days) && ($expected_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $expected_days when calling PeriodMetrics., must be bigger than or equal to 0.');
        }

        $this->container['expected_days'] = $expected_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


