<?php
/**
 * Worker
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Worker Class Doc Comment
 *
 * @category Class
 * @description Represents a staff member available for shift assignment in workforce scheduling.  A Worker contains all the information needed to determine shift compatibility and assignment optimality including:  **Key Information:** - Basic identification and contact details - Work availability periods (preferred, unpreferred, unavailable times) - Skills and qualifications for matching with shift requirements - Labor constraints (consecutive workdays, break requirements, etc.) - Time balance tracking (overtime, flextime accumulated hours) - Cost and revenue parameters for optimization calculations  **Assignment Compatibility:** The system automatically checks worker-shift compatibility based on: - Skills matching (worker must have all skills required by shift) - Time availability (shift must not overlap unavailable periods) - Work constraints (respect minimum breaks, maximum consecutive days) - Contract limits (daily/weekly hour restrictions)  **Optimization Impact:** Each worker has cost/revenue parameters that influence the optimization algorithm&#39;s assignment decisions to balance operational efficiency with labor costs and worker preferences.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Worker implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Worker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'min_break_duration' => '\OpenAPI\Client\Model\MinBreakDuration',
        'max_consecutive_workdays' => '\OpenAPI\Client\Model\MaxConsecutiveWorkdays',
        'balances' => '\OpenAPI\Client\Model\Balances',
        'periods' => '\OpenAPI\Client\Model\PeriodContract[]',
        'availability' => '\OpenAPI\Client\Model\Availability',
        'costs' => '\OpenAPI\Client\Model\WorkerCost',
        'revenues' => '\OpenAPI\Client\Model\WorkerRevenue'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'min_break_duration' => null,
        'max_consecutive_workdays' => null,
        'balances' => null,
        'periods' => null,
        'availability' => null,
        'costs' => null,
        'revenues' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'min_break_duration' => false,
        'max_consecutive_workdays' => false,
        'balances' => false,
        'periods' => false,
        'availability' => false,
        'costs' => false,
        'revenues' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'min_break_duration' => 'min_break_duration',
        'max_consecutive_workdays' => 'max_consecutive_workdays',
        'balances' => 'balances',
        'periods' => 'periods',
        'availability' => 'availability',
        'costs' => 'costs',
        'revenues' => 'revenues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'min_break_duration' => 'setMinBreakDuration',
        'max_consecutive_workdays' => 'setMaxConsecutiveWorkdays',
        'balances' => 'setBalances',
        'periods' => 'setPeriods',
        'availability' => 'setAvailability',
        'costs' => 'setCosts',
        'revenues' => 'setRevenues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'min_break_duration' => 'getMinBreakDuration',
        'max_consecutive_workdays' => 'getMaxConsecutiveWorkdays',
        'balances' => 'getBalances',
        'periods' => 'getPeriods',
        'availability' => 'getAvailability',
        'costs' => 'getCosts',
        'revenues' => 'getRevenues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('min_break_duration', $data ?? [], null);
        $this->setIfExists('max_consecutive_workdays', $data ?? [], null);
        $this->setIfExists('balances', $data ?? [], null);
        $this->setIfExists('periods', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('costs', $data ?? [], null);
        $this->setIfExists('revenues', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Your system's unique identifier for this worker (e.g., employee ID, database primary key).
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Worker's display name for scheduling interfaces and reports.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets min_break_duration
     *
     * @return \OpenAPI\Client\Model\MinBreakDuration|null
     */
    public function getMinBreakDuration()
    {
        return $this->container['min_break_duration'];
    }

    /**
     * Sets min_break_duration
     *
     * @param \OpenAPI\Client\Model\MinBreakDuration|null $min_break_duration min_break_duration
     *
     * @return self
     */
    public function setMinBreakDuration($min_break_duration)
    {
        if (is_null($min_break_duration)) {
            throw new \InvalidArgumentException('non-nullable min_break_duration cannot be null');
        }
        $this->container['min_break_duration'] = $min_break_duration;

        return $this;
    }

    /**
     * Gets max_consecutive_workdays
     *
     * @return \OpenAPI\Client\Model\MaxConsecutiveWorkdays|null
     */
    public function getMaxConsecutiveWorkdays()
    {
        return $this->container['max_consecutive_workdays'];
    }

    /**
     * Sets max_consecutive_workdays
     *
     * @param \OpenAPI\Client\Model\MaxConsecutiveWorkdays|null $max_consecutive_workdays max_consecutive_workdays
     *
     * @return self
     */
    public function setMaxConsecutiveWorkdays($max_consecutive_workdays)
    {
        if (is_null($max_consecutive_workdays)) {
            throw new \InvalidArgumentException('non-nullable max_consecutive_workdays cannot be null');
        }
        $this->container['max_consecutive_workdays'] = $max_consecutive_workdays;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return \OpenAPI\Client\Model\Balances|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param \OpenAPI\Client\Model\Balances|null $balances balances
     *
     * @return self
     */
    public function setBalances($balances)
    {
        if (is_null($balances)) {
            throw new \InvalidArgumentException('non-nullable balances cannot be null');
        }
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \OpenAPI\Client\Model\PeriodContract[]|null
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \OpenAPI\Client\Model\PeriodContract[]|null $periods Contract periods defining work expectations, time limits, and labor rules for different date ranges.
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        if (is_null($periods)) {
            throw new \InvalidArgumentException('non-nullable periods cannot be null');
        }
        $this->container['periods'] = $periods;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \OpenAPI\Client\Model\Availability|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \OpenAPI\Client\Model\Availability|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return \OpenAPI\Client\Model\WorkerCost|null
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param \OpenAPI\Client\Model\WorkerCost|null $costs costs
     *
     * @return self
     */
    public function setCosts($costs)
    {
        if (is_null($costs)) {
            throw new \InvalidArgumentException('non-nullable costs cannot be null');
        }
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets revenues
     *
     * @return \OpenAPI\Client\Model\WorkerRevenue|null
     */
    public function getRevenues()
    {
        return $this->container['revenues'];
    }

    /**
     * Sets revenues
     *
     * @param \OpenAPI\Client\Model\WorkerRevenue|null $revenues revenues
     *
     * @return self
     */
    public function setRevenues($revenues)
    {
        if (is_null($revenues)) {
            throw new \InvalidArgumentException('non-nullable revenues cannot be null');
        }
        $this->container['revenues'] = $revenues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


