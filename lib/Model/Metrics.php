<?php
/**
 * Metrics
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Metrics Class Doc Comment
 *
 * @category Class
 * @description Comprehensive financial and operational metrics from workforce scheduling optimization.  These metrics provide detailed insights into the optimization&#39;s effectiveness, including revenue generated, costs incurred, and operational statistics. Essential for understanding the business impact and quality of scheduling decisions.  **Metric Categories:**  **Primary Metrics:** - profit: Overall optimization value (revenue - costs) - partial_profit: Profit excluding period-closing adjustments  **Revenue Sources:** - assignment_revenue: Value from assigning workers to high-value shifts - demand_revenue: Revenue from meeting staffing demand requirements - preferred_time_revenue: Bonus for scheduling during preferred hours - continuity_revenue: Value from maintaining worker schedule consistency - skill_revenue: Revenue from matching skilled workers with shifts that require their skills. - pto_time_revenue: Value from optimally scheduling paid time off  **Cost Factors:** - assignment_cost: Cost of worker assignments - overtime_cost: Cost of overtime hours - unpreferred_time_cost: Penalty for scheduling during unpreferred hours - idle_time_cost: Cost of gaps between worker shifts - variable_costs: Sum of all costs above  **Balance Management:** - period_closing_profit: Flextime and overtime balance adjustments - flextime_balance_negative_revenue: Revenue from accumulated time credit - flextime_balance_positive_cost: Cost of accumulated time credits - overtime_balance_cost: Cost of overtime balance  **Operational Statistics:** - assigned_time: Total minutes of productive work scheduled - overtime: Minutes of premium overtime scheduled - recovered_time: Overtime taken as PTO instead of cash payment
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Metrics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Metrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'profit' => 'float',
        'partial_profit' => 'float',
        'pto_time_revenue' => 'float',
        'assignment_revenue' => 'float',
        'skill_revenue' => 'float',
        'continuity_revenue' => 'float',
        'demand_revenue' => 'float',
        'preferred_time_revenue' => 'float',
        'variable_costs' => 'float',
        'overtime_cost' => 'float',
        'has_exceeded_preferred_max_consecutive_workdays_limit_cost' => 'float',
        'idle_time_cost' => 'float',
        'assignment_cost' => 'float',
        'unpreferred_time_cost' => 'float',
        'period_closing_profit' => 'float',
        'flextime_balance_negative_revenue' => 'float',
        'flextime_balance_positive_cost' => 'float',
        'overtime_balance_cost' => 'float',
        'assigned_time' => 'float',
        'overtime' => 'float',
        'recovered_time' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_date' => 'date',
        'end_date' => 'date',
        'profit' => null,
        'partial_profit' => null,
        'pto_time_revenue' => null,
        'assignment_revenue' => null,
        'skill_revenue' => null,
        'continuity_revenue' => null,
        'demand_revenue' => null,
        'preferred_time_revenue' => null,
        'variable_costs' => null,
        'overtime_cost' => null,
        'has_exceeded_preferred_max_consecutive_workdays_limit_cost' => null,
        'idle_time_cost' => null,
        'assignment_cost' => null,
        'unpreferred_time_cost' => null,
        'period_closing_profit' => null,
        'flextime_balance_negative_revenue' => null,
        'flextime_balance_positive_cost' => null,
        'overtime_balance_cost' => null,
        'assigned_time' => null,
        'overtime' => null,
        'recovered_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_date' => false,
        'end_date' => false,
        'profit' => false,
        'partial_profit' => false,
        'pto_time_revenue' => false,
        'assignment_revenue' => false,
        'skill_revenue' => false,
        'continuity_revenue' => false,
        'demand_revenue' => false,
        'preferred_time_revenue' => false,
        'variable_costs' => false,
        'overtime_cost' => false,
        'has_exceeded_preferred_max_consecutive_workdays_limit_cost' => false,
        'idle_time_cost' => false,
        'assignment_cost' => false,
        'unpreferred_time_cost' => false,
        'period_closing_profit' => false,
        'flextime_balance_negative_revenue' => false,
        'flextime_balance_positive_cost' => false,
        'overtime_balance_cost' => false,
        'assigned_time' => false,
        'overtime' => false,
        'recovered_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'profit' => 'profit',
        'partial_profit' => 'partial_profit',
        'pto_time_revenue' => 'pto_time_revenue',
        'assignment_revenue' => 'assignment_revenue',
        'skill_revenue' => 'skill_revenue',
        'continuity_revenue' => 'continuity_revenue',
        'demand_revenue' => 'demand_revenue',
        'preferred_time_revenue' => 'preferred_time_revenue',
        'variable_costs' => 'variable_costs',
        'overtime_cost' => 'overtime_cost',
        'has_exceeded_preferred_max_consecutive_workdays_limit_cost' => 'has_exceeded_preferred_max_consecutive_workdays_limit_cost',
        'idle_time_cost' => 'idle_time_cost',
        'assignment_cost' => 'assignment_cost',
        'unpreferred_time_cost' => 'unpreferred_time_cost',
        'period_closing_profit' => 'period_closing_profit',
        'flextime_balance_negative_revenue' => 'flextime_balance_negative_revenue',
        'flextime_balance_positive_cost' => 'flextime_balance_positive_cost',
        'overtime_balance_cost' => 'overtime_balance_cost',
        'assigned_time' => 'assigned_time',
        'overtime' => 'overtime',
        'recovered_time' => 'recovered_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'profit' => 'setProfit',
        'partial_profit' => 'setPartialProfit',
        'pto_time_revenue' => 'setPtoTimeRevenue',
        'assignment_revenue' => 'setAssignmentRevenue',
        'skill_revenue' => 'setSkillRevenue',
        'continuity_revenue' => 'setContinuityRevenue',
        'demand_revenue' => 'setDemandRevenue',
        'preferred_time_revenue' => 'setPreferredTimeRevenue',
        'variable_costs' => 'setVariableCosts',
        'overtime_cost' => 'setOvertimeCost',
        'has_exceeded_preferred_max_consecutive_workdays_limit_cost' => 'setHasExceededPreferredMaxConsecutiveWorkdaysLimitCost',
        'idle_time_cost' => 'setIdleTimeCost',
        'assignment_cost' => 'setAssignmentCost',
        'unpreferred_time_cost' => 'setUnpreferredTimeCost',
        'period_closing_profit' => 'setPeriodClosingProfit',
        'flextime_balance_negative_revenue' => 'setFlextimeBalanceNegativeRevenue',
        'flextime_balance_positive_cost' => 'setFlextimeBalancePositiveCost',
        'overtime_balance_cost' => 'setOvertimeBalanceCost',
        'assigned_time' => 'setAssignedTime',
        'overtime' => 'setOvertime',
        'recovered_time' => 'setRecoveredTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'profit' => 'getProfit',
        'partial_profit' => 'getPartialProfit',
        'pto_time_revenue' => 'getPtoTimeRevenue',
        'assignment_revenue' => 'getAssignmentRevenue',
        'skill_revenue' => 'getSkillRevenue',
        'continuity_revenue' => 'getContinuityRevenue',
        'demand_revenue' => 'getDemandRevenue',
        'preferred_time_revenue' => 'getPreferredTimeRevenue',
        'variable_costs' => 'getVariableCosts',
        'overtime_cost' => 'getOvertimeCost',
        'has_exceeded_preferred_max_consecutive_workdays_limit_cost' => 'getHasExceededPreferredMaxConsecutiveWorkdaysLimitCost',
        'idle_time_cost' => 'getIdleTimeCost',
        'assignment_cost' => 'getAssignmentCost',
        'unpreferred_time_cost' => 'getUnpreferredTimeCost',
        'period_closing_profit' => 'getPeriodClosingProfit',
        'flextime_balance_negative_revenue' => 'getFlextimeBalanceNegativeRevenue',
        'flextime_balance_positive_cost' => 'getFlextimeBalancePositiveCost',
        'overtime_balance_cost' => 'getOvertimeBalanceCost',
        'assigned_time' => 'getAssignedTime',
        'overtime' => 'getOvertime',
        'recovered_time' => 'getRecoveredTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('profit', $data ?? [], null);
        $this->setIfExists('partial_profit', $data ?? [], null);
        $this->setIfExists('pto_time_revenue', $data ?? [], null);
        $this->setIfExists('assignment_revenue', $data ?? [], null);
        $this->setIfExists('skill_revenue', $data ?? [], null);
        $this->setIfExists('continuity_revenue', $data ?? [], null);
        $this->setIfExists('demand_revenue', $data ?? [], null);
        $this->setIfExists('preferred_time_revenue', $data ?? [], null);
        $this->setIfExists('variable_costs', $data ?? [], null);
        $this->setIfExists('overtime_cost', $data ?? [], null);
        $this->setIfExists('has_exceeded_preferred_max_consecutive_workdays_limit_cost', $data ?? [], null);
        $this->setIfExists('idle_time_cost', $data ?? [], null);
        $this->setIfExists('assignment_cost', $data ?? [], null);
        $this->setIfExists('unpreferred_time_cost', $data ?? [], null);
        $this->setIfExists('period_closing_profit', $data ?? [], null);
        $this->setIfExists('flextime_balance_negative_revenue', $data ?? [], null);
        $this->setIfExists('flextime_balance_positive_cost', $data ?? [], null);
        $this->setIfExists('overtime_balance_cost', $data ?? [], null);
        $this->setIfExists('assigned_time', $data ?? [], null);
        $this->setIfExists('overtime', $data ?? [], null);
        $this->setIfExists('recovered_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['profit'] === null) {
            $invalidProperties[] = "'profit' can't be null";
        }
        if ($this->container['partial_profit'] === null) {
            $invalidProperties[] = "'partial_profit' can't be null";
        }
        if ($this->container['pto_time_revenue'] === null) {
            $invalidProperties[] = "'pto_time_revenue' can't be null";
        }
        if ($this->container['assignment_revenue'] === null) {
            $invalidProperties[] = "'assignment_revenue' can't be null";
        }
        if ($this->container['skill_revenue'] === null) {
            $invalidProperties[] = "'skill_revenue' can't be null";
        }
        if ($this->container['continuity_revenue'] === null) {
            $invalidProperties[] = "'continuity_revenue' can't be null";
        }
        if ($this->container['demand_revenue'] === null) {
            $invalidProperties[] = "'demand_revenue' can't be null";
        }
        if ($this->container['preferred_time_revenue'] === null) {
            $invalidProperties[] = "'preferred_time_revenue' can't be null";
        }
        if ($this->container['variable_costs'] === null) {
            $invalidProperties[] = "'variable_costs' can't be null";
        }
        if ($this->container['overtime_cost'] === null) {
            $invalidProperties[] = "'overtime_cost' can't be null";
        }
        if ($this->container['has_exceeded_preferred_max_consecutive_workdays_limit_cost'] === null) {
            $invalidProperties[] = "'has_exceeded_preferred_max_consecutive_workdays_limit_cost' can't be null";
        }
        if ($this->container['idle_time_cost'] === null) {
            $invalidProperties[] = "'idle_time_cost' can't be null";
        }
        if ($this->container['assignment_cost'] === null) {
            $invalidProperties[] = "'assignment_cost' can't be null";
        }
        if ($this->container['unpreferred_time_cost'] === null) {
            $invalidProperties[] = "'unpreferred_time_cost' can't be null";
        }
        if ($this->container['period_closing_profit'] === null) {
            $invalidProperties[] = "'period_closing_profit' can't be null";
        }
        if ($this->container['flextime_balance_negative_revenue'] === null) {
            $invalidProperties[] = "'flextime_balance_negative_revenue' can't be null";
        }
        if ($this->container['flextime_balance_positive_cost'] === null) {
            $invalidProperties[] = "'flextime_balance_positive_cost' can't be null";
        }
        if ($this->container['overtime_balance_cost'] === null) {
            $invalidProperties[] = "'overtime_balance_cost' can't be null";
        }
        if ($this->container['assigned_time'] === null) {
            $invalidProperties[] = "'assigned_time' can't be null";
        }
        if ($this->container['overtime'] === null) {
            $invalidProperties[] = "'overtime' can't be null";
        }
        if ($this->container['recovered_time'] === null) {
            $invalidProperties[] = "'recovered_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date First date included in the metrics calculation period.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Last date included in the metrics calculation period.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return float
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param float $profit Total optimization value (all revenue minus all costs). Primary measure of scheduling effectiveness and business impact.
     *
     * @return self
     */
    public function setProfit($profit)
    {
        if (is_null($profit)) {
            throw new \InvalidArgumentException('non-nullable profit cannot be null');
        }
        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets partial_profit
     *
     * @return float
     */
    public function getPartialProfit()
    {
        return $this->container['partial_profit'];
    }

    /**
     * Sets partial_profit
     *
     * @param float $partial_profit Core profit excluding period-closing balance adjustments. Shows operational scheduling value without accounting complexities.
     *
     * @return self
     */
    public function setPartialProfit($partial_profit)
    {
        if (is_null($partial_profit)) {
            throw new \InvalidArgumentException('non-nullable partial_profit cannot be null');
        }
        $this->container['partial_profit'] = $partial_profit;

        return $this;
    }

    /**
     * Gets pto_time_revenue
     *
     * @return float
     */
    public function getPtoTimeRevenue()
    {
        return $this->container['pto_time_revenue'];
    }

    /**
     * Sets pto_time_revenue
     *
     * @param float $pto_time_revenue Revenue generated from optimally scheduling paid time off periods. Balances worker satisfaction with operational needs.
     *
     * @return self
     */
    public function setPtoTimeRevenue($pto_time_revenue)
    {
        if (is_null($pto_time_revenue)) {
            throw new \InvalidArgumentException('non-nullable pto_time_revenue cannot be null');
        }
        $this->container['pto_time_revenue'] = $pto_time_revenue;

        return $this;
    }

    /**
     * Gets assignment_revenue
     *
     * @return float
     */
    public function getAssignmentRevenue()
    {
        return $this->container['assignment_revenue'];
    }

    /**
     * Sets assignment_revenue
     *
     * @param float $assignment_revenue Revenue from assigning workers to shifts based on shift value and worker suitability. Core revenue from successful matches.
     *
     * @return self
     */
    public function setAssignmentRevenue($assignment_revenue)
    {
        if (is_null($assignment_revenue)) {
            throw new \InvalidArgumentException('non-nullable assignment_revenue cannot be null');
        }
        $this->container['assignment_revenue'] = $assignment_revenue;

        return $this;
    }

    /**
     * Gets skill_revenue
     *
     * @return float
     */
    public function getSkillRevenue()
    {
        return $this->container['skill_revenue'];
    }

    /**
     * Sets skill_revenue
     *
     * @param float $skill_revenue Revenue bonus from matching workers with compatible shift requirements, skills, or preferences. Rewards optimal worker-shift pairing.
     *
     * @return self
     */
    public function setSkillRevenue($skill_revenue)
    {
        if (is_null($skill_revenue)) {
            throw new \InvalidArgumentException('non-nullable skill_revenue cannot be null');
        }
        $this->container['skill_revenue'] = $skill_revenue;

        return $this;
    }

    /**
     * Gets continuity_revenue
     *
     * @return float
     */
    public function getContinuityRevenue()
    {
        return $this->container['continuity_revenue'];
    }

    /**
     * Sets continuity_revenue
     *
     * @param float $continuity_revenue Revenue from maintaining consistent worker schedules and minimizing assignment changes. Values schedule stability for worker satisfaction.
     *
     * @return self
     */
    public function setContinuityRevenue($continuity_revenue)
    {
        if (is_null($continuity_revenue)) {
            throw new \InvalidArgumentException('non-nullable continuity_revenue cannot be null');
        }
        $this->container['continuity_revenue'] = $continuity_revenue;

        return $this;
    }

    /**
     * Gets demand_revenue
     *
     * @return float
     */
    public function getDemandRevenue()
    {
        return $this->container['demand_revenue'];
    }

    /**
     * Sets demand_revenue
     *
     * @param float $demand_revenue Revenue generated from meeting staffing demand requirements. Measures success in providing adequate coverage for business needs.
     *
     * @return self
     */
    public function setDemandRevenue($demand_revenue)
    {
        if (is_null($demand_revenue)) {
            throw new \InvalidArgumentException('non-nullable demand_revenue cannot be null');
        }
        $this->container['demand_revenue'] = $demand_revenue;

        return $this;
    }

    /**
     * Gets preferred_time_revenue
     *
     * @return float
     */
    public function getPreferredTimeRevenue()
    {
        return $this->container['preferred_time_revenue'];
    }

    /**
     * Sets preferred_time_revenue
     *
     * @param float $preferred_time_revenue Bonus revenue from scheduling workers during their preferred time periods. Balances worker preferences with operational requirements.
     *
     * @return self
     */
    public function setPreferredTimeRevenue($preferred_time_revenue)
    {
        if (is_null($preferred_time_revenue)) {
            throw new \InvalidArgumentException('non-nullable preferred_time_revenue cannot be null');
        }
        $this->container['preferred_time_revenue'] = $preferred_time_revenue;

        return $this;
    }

    /**
     * Gets variable_costs
     *
     * @return float
     */
    public function getVariableCosts()
    {
        return $this->container['variable_costs'];
    }

    /**
     * Sets variable_costs
     *
     * @param float $variable_costs Additional operational costs incurred from scheduling decisions. Includes dynamic costs that vary with assignment patterns.
     *
     * @return self
     */
    public function setVariableCosts($variable_costs)
    {
        if (is_null($variable_costs)) {
            throw new \InvalidArgumentException('non-nullable variable_costs cannot be null');
        }
        $this->container['variable_costs'] = $variable_costs;

        return $this;
    }

    /**
     * Gets overtime_cost
     *
     * @return float
     */
    public function getOvertimeCost()
    {
        return $this->container['overtime_cost'];
    }

    /**
     * Sets overtime_cost
     *
     * @param float $overtime_cost Premium labor costs for overtime hours beyond regular contract time. Reflects the additional expense of extended work periods.
     *
     * @return self
     */
    public function setOvertimeCost($overtime_cost)
    {
        if (is_null($overtime_cost)) {
            throw new \InvalidArgumentException('non-nullable overtime_cost cannot be null');
        }
        $this->container['overtime_cost'] = $overtime_cost;

        return $this;
    }

    /**
     * Gets has_exceeded_preferred_max_consecutive_workdays_limit_cost
     *
     * @return float
     */
    public function getHasExceededPreferredMaxConsecutiveWorkdaysLimitCost()
    {
        return $this->container['has_exceeded_preferred_max_consecutive_workdays_limit_cost'];
    }

    /**
     * Sets has_exceeded_preferred_max_consecutive_workdays_limit_cost
     *
     * @param float $has_exceeded_preferred_max_consecutive_workdays_limit_cost Penalty cost when workers exceed preferred maximum consecutive workdays. Ensures work-life balance compliance and prevents burnout.
     *
     * @return self
     */
    public function setHasExceededPreferredMaxConsecutiveWorkdaysLimitCost($has_exceeded_preferred_max_consecutive_workdays_limit_cost)
    {
        if (is_null($has_exceeded_preferred_max_consecutive_workdays_limit_cost)) {
            throw new \InvalidArgumentException('non-nullable has_exceeded_preferred_max_consecutive_workdays_limit_cost cannot be null');
        }
        $this->container['has_exceeded_preferred_max_consecutive_workdays_limit_cost'] = $has_exceeded_preferred_max_consecutive_workdays_limit_cost;

        return $this;
    }

    /**
     * Gets idle_time_cost
     *
     * @return float
     */
    public function getIdleTimeCost()
    {
        return $this->container['idle_time_cost'];
    }

    /**
     * Sets idle_time_cost
     *
     * @param float $idle_time_cost Cost of unproductive time gaps between worker shifts. Encourages efficient schedule compactness while respecting break requirements.
     *
     * @return self
     */
    public function setIdleTimeCost($idle_time_cost)
    {
        if (is_null($idle_time_cost)) {
            throw new \InvalidArgumentException('non-nullable idle_time_cost cannot be null');
        }
        $this->container['idle_time_cost'] = $idle_time_cost;

        return $this;
    }

    /**
     * Gets assignment_cost
     *
     * @return float
     */
    public function getAssignmentCost()
    {
        return $this->container['assignment_cost'];
    }

    /**
     * Sets assignment_cost
     *
     * @param float $assignment_cost Base labor costs for worker assignments including wages, benefits, and administrative overhead. Core cost of workforce utilization.
     *
     * @return self
     */
    public function setAssignmentCost($assignment_cost)
    {
        if (is_null($assignment_cost)) {
            throw new \InvalidArgumentException('non-nullable assignment_cost cannot be null');
        }
        $this->container['assignment_cost'] = $assignment_cost;

        return $this;
    }

    /**
     * Gets unpreferred_time_cost
     *
     * @return float
     */
    public function getUnpreferredTimeCost()
    {
        return $this->container['unpreferred_time_cost'];
    }

    /**
     * Sets unpreferred_time_cost
     *
     * @param float $unpreferred_time_cost Penalty for scheduling workers during periods they marked as unpreferred. Balances operational needs with worker satisfaction.
     *
     * @return self
     */
    public function setUnpreferredTimeCost($unpreferred_time_cost)
    {
        if (is_null($unpreferred_time_cost)) {
            throw new \InvalidArgumentException('non-nullable unpreferred_time_cost cannot be null');
        }
        $this->container['unpreferred_time_cost'] = $unpreferred_time_cost;

        return $this;
    }

    /**
     * Gets period_closing_profit
     *
     * @return float
     */
    public function getPeriodClosingProfit()
    {
        return $this->container['period_closing_profit'];
    }

    /**
     * Sets period_closing_profit
     *
     * @param float $period_closing_profit Profit adjustment for flextime and overtime balance management at period boundaries. Handles accounting for accumulated time credits/debts.
     *
     * @return self
     */
    public function setPeriodClosingProfit($period_closing_profit)
    {
        if (is_null($period_closing_profit)) {
            throw new \InvalidArgumentException('non-nullable period_closing_profit cannot be null');
        }
        $this->container['period_closing_profit'] = $period_closing_profit;

        return $this;
    }

    /**
     * Gets flextime_balance_negative_revenue
     *
     * @return float
     */
    public function getFlextimeBalanceNegativeRevenue()
    {
        return $this->container['flextime_balance_negative_revenue'];
    }

    /**
     * Sets flextime_balance_negative_revenue
     *
     * @param float $flextime_balance_negative_revenue Revenue from workers making up time debt (negative flextime balance). Helps ensure contract hour obligations are met.
     *
     * @return self
     */
    public function setFlextimeBalanceNegativeRevenue($flextime_balance_negative_revenue)
    {
        if (is_null($flextime_balance_negative_revenue)) {
            throw new \InvalidArgumentException('non-nullable flextime_balance_negative_revenue cannot be null');
        }
        $this->container['flextime_balance_negative_revenue'] = $flextime_balance_negative_revenue;

        return $this;
    }

    /**
     * Gets flextime_balance_positive_cost
     *
     * @return float
     */
    public function getFlextimeBalancePositiveCost()
    {
        return $this->container['flextime_balance_positive_cost'];
    }

    /**
     * Sets flextime_balance_positive_cost
     *
     * @param float $flextime_balance_positive_cost Cost of accumulated worker time credits (positive flextime balance). Represents future time-off obligations or premium payments.
     *
     * @return self
     */
    public function setFlextimeBalancePositiveCost($flextime_balance_positive_cost)
    {
        if (is_null($flextime_balance_positive_cost)) {
            throw new \InvalidArgumentException('non-nullable flextime_balance_positive_cost cannot be null');
        }
        $this->container['flextime_balance_positive_cost'] = $flextime_balance_positive_cost;

        return $this;
    }

    /**
     * Gets overtime_balance_cost
     *
     * @return float
     */
    public function getOvertimeBalanceCost()
    {
        return $this->container['overtime_balance_cost'];
    }

    /**
     * Sets overtime_balance_cost
     *
     * @param float $overtime_balance_cost Cost associated with managing overtime balances and accumulated overtime compensation. Tracks overtime liability management.
     *
     * @return self
     */
    public function setOvertimeBalanceCost($overtime_balance_cost)
    {
        if (is_null($overtime_balance_cost)) {
            throw new \InvalidArgumentException('non-nullable overtime_balance_cost cannot be null');
        }
        $this->container['overtime_balance_cost'] = $overtime_balance_cost;

        return $this;
    }

    /**
     * Gets assigned_time
     *
     * @return float
     */
    public function getAssignedTime()
    {
        return $this->container['assigned_time'];
    }

    /**
     * Sets assigned_time
     *
     * @param float $assigned_time Total minutes of productive work time assigned to workers. Core measure of workforce utilization and operational capacity.
     *
     * @return self
     */
    public function setAssignedTime($assigned_time)
    {
        if (is_null($assigned_time)) {
            throw new \InvalidArgumentException('non-nullable assigned_time cannot be null');
        }
        $this->container['assigned_time'] = $assigned_time;

        return $this;
    }

    /**
     * Gets overtime
     *
     * @return float
     */
    public function getOvertime()
    {
        return $this->container['overtime'];
    }

    /**
     * Sets overtime
     *
     * @param float $overtime Total minutes of overtime scheduled beyond regular contract hours. Indicates reliance on premium labor to meet demands.
     *
     * @return self
     */
    public function setOvertime($overtime)
    {
        if (is_null($overtime)) {
            throw new \InvalidArgumentException('non-nullable overtime cannot be null');
        }
        $this->container['overtime'] = $overtime;

        return $this;
    }

    /**
     * Gets recovered_time
     *
     * @return float
     */
    public function getRecoveredTime()
    {
        return $this->container['recovered_time'];
    }

    /**
     * Sets recovered_time
     *
     * @param float $recovered_time Total minutes of overtime taken as paid time off instead of cash payment. Shows flexibility in overtime compensation management.
     *
     * @return self
     */
    public function setRecoveredTime($recovered_time)
    {
        if (is_null($recovered_time)) {
            throw new \InvalidArgumentException('non-nullable recovered_time cannot be null');
        }
        $this->container['recovered_time'] = $recovered_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


