<?php
/**
 * PeriodTimeConstraintsTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PristimePhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace PristimePhpSdk\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * PeriodTimeConstraintsTest Class Doc Comment
 *
 * @category    Class
 * @description Time constraints and limits for a worker over a specific date range (most commonly a week).  **Common Patterns:** - **40-hour work week**: contractual&#x3D;2400 (40*60), min_expected&#x3D;2400 (40*60), max_expected&#x3D;2400 (40*60), max_overtime&#x3D;600 (10 hours) - **Flexible Part-time contract**: contractual&#x3D;1200 (20 hours), min_expected&#x3D;900 (15 hours), max_expected&#x3D;1500 (25 hours), max_overtime&#x3D;300 (5 hours)  **Set to None to indicate no limit for that constraint.**
 * @package     PristimePhpSdk
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PeriodTimeConstraintsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PeriodTimeConstraints"
     */
    public function testPeriodTimeConstraints()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "contractual_time_minutes"
     */
    public function testPropertyContractualTimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "min_expected_time_minutes"
     */
    public function testPropertyMinExpectedTimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_expected_time_minutes"
     */
    public function testPropertyMaxExpectedTimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_overtime_minutes"
     */
    public function testPropertyMaxOvertimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_assigned_time_minutes"
     */
    public function testPropertyMaxAssignedTimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_recovered_time_minutes"
     */
    public function testPropertyMaxRecoveredTimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_pto_time_minutes"
     */
    public function testPropertyMaxPtoTimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_scheduled_time_minutes"
     */
    public function testPropertyMaxScheduledTimeMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
