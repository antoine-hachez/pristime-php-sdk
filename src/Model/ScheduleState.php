<?php
/**
 * ScheduleState
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PristimePhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PristimePhpSdk\Model;

use \ArrayAccess;
use \PristimePhpSdk\ObjectSerializer;

/**
 * ScheduleState Class Doc Comment
 *
 * @category Class
 * @description Complete workforce scheduling optimization request.  This is the main payload for scheduling jobs, containing all the information needed to optimize shift assignments across your workforce. The optimization engine will assign shifts to workers while respecting availability, skills, labor constraints, and business rules to meet staffing demands efficiently.  **Typical Workflow:** 1. Define the scheduling period and timezone 2. Add your workers with their availability and skills 3. Add shifts to be assigned (existing or new) 4. Specify staffing demands (how many workers needed when) 5. Add any custom constraints 6. Submit for optimization 7. Receive optimized shift assignments
 * @package  PristimePhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScheduleState implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduleState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduling_period' => '\PristimePhpSdk\Model\SchedulingPeriod',
        'workers' => '\PristimePhpSdk\Model\Worker[]',
        'shifts' => '\PristimePhpSdk\Model\Shift[]',
        'demands' => '\PristimePhpSdk\Model\Demand[]',
        'config' => '\PristimePhpSdk\Model\ScheduleJobConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'scheduling_period' => null,
        'workers' => null,
        'shifts' => null,
        'demands' => null,
        'config' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'scheduling_period' => false,
        'workers' => false,
        'shifts' => false,
        'demands' => false,
        'config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduling_period' => 'scheduling_period',
        'workers' => 'workers',
        'shifts' => 'shifts',
        'demands' => 'demands',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduling_period' => 'setSchedulingPeriod',
        'workers' => 'setWorkers',
        'shifts' => 'setShifts',
        'demands' => 'setDemands',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduling_period' => 'getSchedulingPeriod',
        'workers' => 'getWorkers',
        'shifts' => 'getShifts',
        'demands' => 'getDemands',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('scheduling_period', $data ?? [], null);
        $this->setIfExists('workers', $data ?? [], null);
        $this->setIfExists('shifts', $data ?? [], null);
        $this->setIfExists('demands', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scheduling_period'] === null) {
            $invalidProperties[] = "'scheduling_period' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduling_period
     *
     * @return \PristimePhpSdk\Model\SchedulingPeriod
     */
    public function getSchedulingPeriod()
    {
        return $this->container['scheduling_period'];
    }

    /**
     * Sets scheduling_period
     *
     * @param \PristimePhpSdk\Model\SchedulingPeriod $scheduling_period scheduling_period
     *
     * @return self
     */
    public function setSchedulingPeriod($scheduling_period)
    {
        if (is_null($scheduling_period)) {
            throw new \InvalidArgumentException('non-nullable scheduling_period cannot be null');
        }
        $this->container['scheduling_period'] = $scheduling_period;

        return $this;
    }

    /**
     * Gets workers
     *
     * @return \PristimePhpSdk\Model\Worker[]|null
     */
    public function getWorkers()
    {
        return $this->container['workers'];
    }

    /**
     * Sets workers
     *
     * @param \PristimePhpSdk\Model\Worker[]|null $workers Your staff members available for shift assignment. Include their availability, skills, work constraints, and contract details.
     *
     * @return self
     */
    public function setWorkers($workers)
    {
        if (is_null($workers)) {
            throw new \InvalidArgumentException('non-nullable workers cannot be null');
        }
        $this->container['workers'] = $workers;

        return $this;
    }

    /**
     * Gets shifts
     *
     * @return \PristimePhpSdk\Model\Shift[]|null
     */
    public function getShifts()
    {
        return $this->container['shifts'];
    }

    /**
     * Sets shifts
     *
     * @param \PristimePhpSdk\Model\Shift[]|null $shifts Work shifts to be optimized. Can include assigned and unassigned shifts.
     *
     * @return self
     */
    public function setShifts($shifts)
    {
        if (is_null($shifts)) {
            throw new \InvalidArgumentException('non-nullable shifts cannot be null');
        }
        $this->container['shifts'] = $shifts;

        return $this;
    }

    /**
     * Gets demands
     *
     * @return \PristimePhpSdk\Model\Demand[]|null
     */
    public function getDemands()
    {
        return $this->container['demands'];
    }

    /**
     * Sets demands
     *
     * @param \PristimePhpSdk\Model\Demand[]|null $demands Staffing requirements over time - specify how many workers with certain skills you need at different times.
     *
     * @return self
     */
    public function setDemands($demands)
    {
        if (is_null($demands)) {
            throw new \InvalidArgumentException('non-nullable demands cannot be null');
        }
        $this->container['demands'] = $demands;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \PristimePhpSdk\Model\ScheduleJobConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \PristimePhpSdk\Model\ScheduleJobConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


