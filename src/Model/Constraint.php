<?php
/**
 * Constraint
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PristimeSdk\Model;

use \ArrayAccess;
use \PristimeSdk\ObjectSerializer;

/**
 * Constraint Class Doc Comment
 *
 * @category Class
 * @description Custom business rule that limits which shifts can be assigned to which workers.  Constraints allow you to enforce specific business requirements that go beyond the basic availability and skills matching. They work by limiting the total number of shifts that can be assigned from a specific set to a specific group of workers.  **Common Use Cases:** - **Exclusive assignments**: Ensure only one worker from a group can be assigned to critical shifts - **Load balancing**: Distribute high-demand shifts fairly across qualified workers - **Specialization limits**: Prevent workers from being over-assigned to specialized roles - **Cross-training**: Ensure multiple workers can cover important shift types - **Conflict resolution**: Handle situations where certain workers shouldn&#39;t work together  **How it works:** The constraint specifies a maximum number of shifts from &#x60;caller_shift_ids&#x60; that can be assigned to workers in &#x60;caller_worker_ids&#x60;. For example, with max_assigned&#x3D;1: - Only 1 of the specified shifts can be assigned to any of the specified workers - This could ensure exclusive coverage or prevent resource conflicts  **Example:** To ensure only one supervisor works weekend nights: - caller_shift_ids: [weekend_night_shift_1, weekend_night_shift_2] - caller_worker_ids: [supervisor_alice, supervisor_bob] - max_assigned: 1
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Constraint implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Constraint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'caller_shift_ids' => 'string[]',
        'caller_worker_ids' => 'string[]',
        'max_assigned' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'caller_shift_ids' => null,
        'caller_worker_ids' => null,
        'max_assigned' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'caller_shift_ids' => false,
        'caller_worker_ids' => false,
        'max_assigned' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'caller_shift_ids' => 'caller_shift_ids',
        'caller_worker_ids' => 'caller_worker_ids',
        'max_assigned' => 'max_assigned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'caller_shift_ids' => 'setCallerShiftIds',
        'caller_worker_ids' => 'setCallerWorkerIds',
        'max_assigned' => 'setMaxAssigned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'caller_shift_ids' => 'getCallerShiftIds',
        'caller_worker_ids' => 'getCallerWorkerIds',
        'max_assigned' => 'getMaxAssigned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('caller_shift_ids', $data ?? [], null);
        $this->setIfExists('caller_worker_ids', $data ?? [], null);
        $this->setIfExists('max_assigned', $data ?? [], 1);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets caller_shift_ids
     *
     * @return string[]|null
     */
    public function getCallerShiftIds()
    {
        return $this->container['caller_shift_ids'];
    }

    /**
     * Sets caller_shift_ids
     *
     * @param string[]|null $caller_shift_ids List of shift IDs that this constraint applies to. These are the shifts that will be limited in their assignment to the specified workers.
     *
     * @return self
     */
    public function setCallerShiftIds($caller_shift_ids)
    {
        if (is_null($caller_shift_ids)) {
            throw new \InvalidArgumentException('non-nullable caller_shift_ids cannot be null');
        }
        $this->container['caller_shift_ids'] = $caller_shift_ids;

        return $this;
    }

    /**
     * Gets caller_worker_ids
     *
     * @return string[]|null
     */
    public function getCallerWorkerIds()
    {
        return $this->container['caller_worker_ids'];
    }

    /**
     * Sets caller_worker_ids
     *
     * @param string[]|null $caller_worker_ids List of worker IDs that this constraint applies to. These are the workers who are subject to the assignment limitation for the specified shifts.
     *
     * @return self
     */
    public function setCallerWorkerIds($caller_worker_ids)
    {
        if (is_null($caller_worker_ids)) {
            throw new \InvalidArgumentException('non-nullable caller_worker_ids cannot be null');
        }
        $this->container['caller_worker_ids'] = $caller_worker_ids;

        return $this;
    }

    /**
     * Gets max_assigned
     *
     * @return int|null
     */
    public function getMaxAssigned()
    {
        return $this->container['max_assigned'];
    }

    /**
     * Sets max_assigned
     *
     * @param int|null $max_assigned Maximum number of shifts (from caller_shift_ids) that can be assigned to any combination of workers (from caller_worker_ids). Use 1 for exclusive assignment, higher numbers for load distribution.
     *
     * @return self
     */
    public function setMaxAssigned($max_assigned)
    {
        if (is_null($max_assigned)) {
            throw new \InvalidArgumentException('non-nullable max_assigned cannot be null');
        }
        $this->container['max_assigned'] = $max_assigned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


