<?php
/**
 * WorkerRevenue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PristimeSdk\Model;

use \ArrayAccess;
use \PristimeSdk\ObjectSerializer;

/**
 * WorkerRevenue Class Doc Comment
 *
 * @category Class
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WorkerRevenue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkerRevenue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'per_hour_of_negative_flextime_balance' => 'int',
        'per_hour_of_pto' => 'int',
        'per_hour_of_preferred_period' => 'int',
        'per_hour_of_skilled_work' => 'array<string,int>',
        'per_hour_of_tagged_work' => 'array<string,int>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'per_hour_of_negative_flextime_balance' => null,
        'per_hour_of_pto' => null,
        'per_hour_of_preferred_period' => null,
        'per_hour_of_skilled_work' => null,
        'per_hour_of_tagged_work' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'per_hour_of_negative_flextime_balance' => false,
        'per_hour_of_pto' => false,
        'per_hour_of_preferred_period' => false,
        'per_hour_of_skilled_work' => false,
        'per_hour_of_tagged_work' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'per_hour_of_negative_flextime_balance' => 'per_hour_of_negative_flextime_balance',
        'per_hour_of_pto' => 'per_hour_of_pto',
        'per_hour_of_preferred_period' => 'per_hour_of_preferred_period',
        'per_hour_of_skilled_work' => 'per_hour_of_skilled_work',
        'per_hour_of_tagged_work' => 'per_hour_of_tagged_work'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'per_hour_of_negative_flextime_balance' => 'setPerHourOfNegativeFlextimeBalance',
        'per_hour_of_pto' => 'setPerHourOfPto',
        'per_hour_of_preferred_period' => 'setPerHourOfPreferredPeriod',
        'per_hour_of_skilled_work' => 'setPerHourOfSkilledWork',
        'per_hour_of_tagged_work' => 'setPerHourOfTaggedWork'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'per_hour_of_negative_flextime_balance' => 'getPerHourOfNegativeFlextimeBalance',
        'per_hour_of_pto' => 'getPerHourOfPto',
        'per_hour_of_preferred_period' => 'getPerHourOfPreferredPeriod',
        'per_hour_of_skilled_work' => 'getPerHourOfSkilledWork',
        'per_hour_of_tagged_work' => 'getPerHourOfTaggedWork'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('per_hour_of_negative_flextime_balance', $data ?? [], 10);
        $this->setIfExists('per_hour_of_pto', $data ?? [], 1000);
        $this->setIfExists('per_hour_of_preferred_period', $data ?? [], 5);
        $this->setIfExists('per_hour_of_skilled_work', $data ?? [], null);
        $this->setIfExists('per_hour_of_tagged_work', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets per_hour_of_negative_flextime_balance
     *
     * @return int|null
     */
    public function getPerHourOfNegativeFlextimeBalance()
    {
        return $this->container['per_hour_of_negative_flextime_balance'];
    }

    /**
     * Sets per_hour_of_negative_flextime_balance
     *
     * @param int|null $per_hour_of_negative_flextime_balance How much revenue is earned at the end of the period for each flex time balance negative hour
     *
     * @return self
     */
    public function setPerHourOfNegativeFlextimeBalance($per_hour_of_negative_flextime_balance)
    {
        if (is_null($per_hour_of_negative_flextime_balance)) {
            throw new \InvalidArgumentException('non-nullable per_hour_of_negative_flextime_balance cannot be null');
        }
        $this->container['per_hour_of_negative_flextime_balance'] = $per_hour_of_negative_flextime_balance;

        return $this;
    }

    /**
     * Gets per_hour_of_pto
     *
     * @return int|null
     */
    public function getPerHourOfPto()
    {
        return $this->container['per_hour_of_pto'];
    }

    /**
     * Sets per_hour_of_pto
     *
     * @param int|null $per_hour_of_pto How much revenue is earned for each pto time hour
     *
     * @return self
     */
    public function setPerHourOfPto($per_hour_of_pto)
    {
        if (is_null($per_hour_of_pto)) {
            throw new \InvalidArgumentException('non-nullable per_hour_of_pto cannot be null');
        }
        $this->container['per_hour_of_pto'] = $per_hour_of_pto;

        return $this;
    }

    /**
     * Gets per_hour_of_preferred_period
     *
     * @return int|null
     */
    public function getPerHourOfPreferredPeriod()
    {
        return $this->container['per_hour_of_preferred_period'];
    }

    /**
     * Sets per_hour_of_preferred_period
     *
     * @param int|null $per_hour_of_preferred_period How much revenue is earned for each hour assigned during a preferred period
     *
     * @return self
     */
    public function setPerHourOfPreferredPeriod($per_hour_of_preferred_period)
    {
        if (is_null($per_hour_of_preferred_period)) {
            throw new \InvalidArgumentException('non-nullable per_hour_of_preferred_period cannot be null');
        }
        $this->container['per_hour_of_preferred_period'] = $per_hour_of_preferred_period;

        return $this;
    }

    /**
     * Gets per_hour_of_skilled_work
     *
     * @return array<string,int>|null
     */
    public function getPerHourOfSkilledWork()
    {
        return $this->container['per_hour_of_skilled_work'];
    }

    /**
     * Sets per_hour_of_skilled_work
     *
     * @param array<string,int>|null $per_hour_of_skilled_work Extra revenue per skill in euros per hour.         These skills are also used to determine the compatibility with shifts (shift.required_skills) and demands (demand.required_skills).
     *
     * @return self
     */
    public function setPerHourOfSkilledWork($per_hour_of_skilled_work)
    {
        if (is_null($per_hour_of_skilled_work)) {
            throw new \InvalidArgumentException('non-nullable per_hour_of_skilled_work cannot be null');
        }
        $this->container['per_hour_of_skilled_work'] = $per_hour_of_skilled_work;

        return $this;
    }

    /**
     * Gets per_hour_of_tagged_work
     *
     * @return array<string,int>|null
     */
    public function getPerHourOfTaggedWork()
    {
        return $this->container['per_hour_of_tagged_work'];
    }

    /**
     * Sets per_hour_of_tagged_work
     *
     * @param array<string,int>|null $per_hour_of_tagged_work Extra revenue per tagged work in euros per hour.         This revenue is used to make the assignment fairer towards workers that are lagging behind in the number of shifts with a specific tag.
     *
     * @return self
     */
    public function setPerHourOfTaggedWork($per_hour_of_tagged_work)
    {
        if (is_null($per_hour_of_tagged_work)) {
            throw new \InvalidArgumentException('non-nullable per_hour_of_tagged_work cannot be null');
        }
        $this->container['per_hour_of_tagged_work'] = $per_hour_of_tagged_work;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


