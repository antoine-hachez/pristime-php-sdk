<?php
/**
 * DayCosts
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PristimePhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PristimePhpSdk\Model;

use \ArrayAccess;
use \PristimePhpSdk\ObjectSerializer;

/**
 * DayCosts Class Doc Comment
 *
 * @category Class
 * @description Daily cost parameters for different types of work time used in optimization calculations.  These costs influence how the optimizer assigns shifts by making certain work patterns more or less economically attractive. Higher costs discourage the optimizer from choosing those assignments, while lower costs make them more appealing.  **Business Impact:** - Controls overtime usage (higher overtime costs &#x3D; less overtime assignments) - Manages idle time between shifts (higher idle costs &#x3D; more efficient scheduling) - Balances expected vs actual work hours (flextime cost management)
 * @package  PristimePhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DayCosts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DayCosts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'per_expected_hour' => 'int',
        'per_flextime_positive_hour' => 'int',
        'per_overtime_hour' => 'int',
        'per_assigned_hour' => 'int',
        'per_idle_hour_between_shifts' => 'int',
        'per_undertime_hour' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'per_expected_hour' => null,
        'per_flextime_positive_hour' => null,
        'per_overtime_hour' => null,
        'per_assigned_hour' => null,
        'per_idle_hour_between_shifts' => null,
        'per_undertime_hour' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'per_expected_hour' => false,
        'per_flextime_positive_hour' => false,
        'per_overtime_hour' => false,
        'per_assigned_hour' => false,
        'per_idle_hour_between_shifts' => false,
        'per_undertime_hour' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'per_expected_hour' => 'per_expected_hour',
        'per_flextime_positive_hour' => 'per_flextime_positive_hour',
        'per_overtime_hour' => 'per_overtime_hour',
        'per_assigned_hour' => 'per_assigned_hour',
        'per_idle_hour_between_shifts' => 'per_idle_hour_between_shifts',
        'per_undertime_hour' => 'per_undertime_hour'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'per_expected_hour' => 'setPerExpectedHour',
        'per_flextime_positive_hour' => 'setPerFlextimePositiveHour',
        'per_overtime_hour' => 'setPerOvertimeHour',
        'per_assigned_hour' => 'setPerAssignedHour',
        'per_idle_hour_between_shifts' => 'setPerIdleHourBetweenShifts',
        'per_undertime_hour' => 'setPerUndertimeHour'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'per_expected_hour' => 'getPerExpectedHour',
        'per_flextime_positive_hour' => 'getPerFlextimePositiveHour',
        'per_overtime_hour' => 'getPerOvertimeHour',
        'per_assigned_hour' => 'getPerAssignedHour',
        'per_idle_hour_between_shifts' => 'getPerIdleHourBetweenShifts',
        'per_undertime_hour' => 'getPerUndertimeHour'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('per_expected_hour', $data ?? [], 0);
        $this->setIfExists('per_flextime_positive_hour', $data ?? [], 8);
        $this->setIfExists('per_overtime_hour', $data ?? [], 50);
        $this->setIfExists('per_assigned_hour', $data ?? [], 0);
        $this->setIfExists('per_idle_hour_between_shifts', $data ?? [], 1);
        $this->setIfExists('per_undertime_hour', $data ?? [], 10);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets per_expected_hour
     *
     * @return int|null
     */
    public function getPerExpectedHour()
    {
        return $this->container['per_expected_hour'];
    }

    /**
     * Sets per_expected_hour
     *
     * @param int|null $per_expected_hour Cost per hour of expected work time. Used when worker has guaranteed hours that must be paid regardless of actual assignments.
     *
     * @return self
     */
    public function setPerExpectedHour($per_expected_hour)
    {
        if (is_null($per_expected_hour)) {
            throw new \InvalidArgumentException('non-nullable per_expected_hour cannot be null');
        }
        $this->container['per_expected_hour'] = $per_expected_hour;

        return $this;
    }

    /**
     * Gets per_flextime_positive_hour
     *
     * @return int|null
     */
    public function getPerFlextimePositiveHour()
    {
        return $this->container['per_flextime_positive_hour'];
    }

    /**
     * Sets per_flextime_positive_hour
     *
     * @param int|null $per_flextime_positive_hour Cost per hour when worker exceeds their standard daily hours (positive flextime). Higher values discourage over-scheduling on individual days.
     *
     * @return self
     */
    public function setPerFlextimePositiveHour($per_flextime_positive_hour)
    {
        if (is_null($per_flextime_positive_hour)) {
            throw new \InvalidArgumentException('non-nullable per_flextime_positive_hour cannot be null');
        }
        $this->container['per_flextime_positive_hour'] = $per_flextime_positive_hour;

        return $this;
    }

    /**
     * Gets per_overtime_hour
     *
     * @return int|null
     */
    public function getPerOvertimeHour()
    {
        return $this->container['per_overtime_hour'];
    }

    /**
     * Sets per_overtime_hour
     *
     * @param int|null $per_overtime_hour Cost per hour of overtime work beyond regular hours. Set higher to limit overtime usage to only high-value shifts.
     *
     * @return self
     */
    public function setPerOvertimeHour($per_overtime_hour)
    {
        if (is_null($per_overtime_hour)) {
            throw new \InvalidArgumentException('non-nullable per_overtime_hour cannot be null');
        }
        $this->container['per_overtime_hour'] = $per_overtime_hour;

        return $this;
    }

    /**
     * Gets per_assigned_hour
     *
     * @return int|null
     */
    public function getPerAssignedHour()
    {
        return $this->container['per_assigned_hour'];
    }

    /**
     * Sets per_assigned_hour
     *
     * @param int|null $per_assigned_hour Base cost per hour for any assigned shift work. Represents the fundamental cost of having a worker on duty.
     *
     * @return self
     */
    public function setPerAssignedHour($per_assigned_hour)
    {
        if (is_null($per_assigned_hour)) {
            throw new \InvalidArgumentException('non-nullable per_assigned_hour cannot be null');
        }
        $this->container['per_assigned_hour'] = $per_assigned_hour;

        return $this;
    }

    /**
     * Gets per_idle_hour_between_shifts
     *
     * @return int|null
     */
    public function getPerIdleHourBetweenShifts()
    {
        return $this->container['per_idle_hour_between_shifts'];
    }

    /**
     * Sets per_idle_hour_between_shifts
     *
     * @param int|null $per_idle_hour_between_shifts Cost per hour of paid idle time between shifts on the same day. Higher values encourage tighter scheduling with fewer gaps.
     *
     * @return self
     */
    public function setPerIdleHourBetweenShifts($per_idle_hour_between_shifts)
    {
        if (is_null($per_idle_hour_between_shifts)) {
            throw new \InvalidArgumentException('non-nullable per_idle_hour_between_shifts cannot be null');
        }
        $this->container['per_idle_hour_between_shifts'] = $per_idle_hour_between_shifts;

        return $this;
    }

    /**
     * Gets per_undertime_hour
     *
     * @return int|null
     */
    public function getPerUndertimeHour()
    {
        return $this->container['per_undertime_hour'];
    }

    /**
     * Sets per_undertime_hour
     *
     * @param int|null $per_undertime_hour Small cost per hour when worker is scheduled less than expected. Helps ensure workers get their expected hours when possible.
     *
     * @return self
     */
    public function setPerUndertimeHour($per_undertime_hour)
    {
        if (is_null($per_undertime_hour)) {
            throw new \InvalidArgumentException('non-nullable per_undertime_hour cannot be null');
        }
        $this->container['per_undertime_hour'] = $per_undertime_hour;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


