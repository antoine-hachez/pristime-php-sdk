<?php
/**
 * DayMetrics
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PristimeSdk\PristimeSdk\Model;

use \ArrayAccess;
use \PristimeSdk\ObjectSerializer;

/**
 * DayMetrics Class Doc Comment
 *
 * @category Class
 * @description Tracks actual time worked and contract fulfillment for a specific date.  This class contains the actual values that result from scheduling decisions, as opposed to the constraints and limits defined elsewhere. It tracks both worker-level metrics (when they worked) and contract-level metrics (how contract obligations were met).  **Key Concepts:** - **Expected Time**: Hours the worker is contracted to work (paid regardless) - **Overtime**: Hours worked beyond the expected/standard time - **Assigned Time**: Actual hours assigned to shifts - **Flextime**: Difference between contracted and actual hours (can be positive or negative) - **Active Day**: Any day where the worker has time obligations (expected or overtime)  **Usage:** Set values to None where no tracking is needed for that metric.
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DayMetrics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DayMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_datetime' => '\DateTime',
        'end_datetime' => '\DateTime',
        'idle_time_minutes' => 'int',
        'has_exceeded_preferred_max_consecutive_workdays_limit' => 'bool',
        'has_scheduled_time' => 'bool',
        'has_expected_time' => 'bool',
        'has_overtime' => 'bool',
        'has_assigned_time' => 'bool',
        'has_max_expected_time_reached' => 'bool',
        'has_any_max_expected_reached' => 'bool',
        'expected_time_minutes' => 'int',
        'overtime_minutes' => 'int',
        'assigned_time_minutes' => 'int',
        'recovered_time_minutes' => 'int',
        'pto_time_minutes' => 'int',
        'flextime_negative_minutes' => 'int',
        'flextime_positive_minutes' => 'int',
        'overtime_balance_minutes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_datetime' => 'date-time',
        'end_datetime' => 'date-time',
        'idle_time_minutes' => null,
        'has_exceeded_preferred_max_consecutive_workdays_limit' => null,
        'has_scheduled_time' => null,
        'has_expected_time' => null,
        'has_overtime' => null,
        'has_assigned_time' => null,
        'has_max_expected_time_reached' => null,
        'has_any_max_expected_reached' => null,
        'expected_time_minutes' => null,
        'overtime_minutes' => null,
        'assigned_time_minutes' => null,
        'recovered_time_minutes' => null,
        'pto_time_minutes' => null,
        'flextime_negative_minutes' => null,
        'flextime_positive_minutes' => null,
        'overtime_balance_minutes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_datetime' => true,
        'end_datetime' => true,
        'idle_time_minutes' => true,
        'has_exceeded_preferred_max_consecutive_workdays_limit' => true,
        'has_scheduled_time' => true,
        'has_expected_time' => true,
        'has_overtime' => true,
        'has_assigned_time' => true,
        'has_max_expected_time_reached' => true,
        'has_any_max_expected_reached' => true,
        'expected_time_minutes' => true,
        'overtime_minutes' => true,
        'assigned_time_minutes' => true,
        'recovered_time_minutes' => true,
        'pto_time_minutes' => true,
        'flextime_negative_minutes' => true,
        'flextime_positive_minutes' => true,
        'overtime_balance_minutes' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_datetime' => 'start_datetime',
        'end_datetime' => 'end_datetime',
        'idle_time_minutes' => 'idle_time_minutes',
        'has_exceeded_preferred_max_consecutive_workdays_limit' => 'has_exceeded_preferred_max_consecutive_workdays_limit',
        'has_scheduled_time' => 'has_scheduled_time',
        'has_expected_time' => 'has_expected_time',
        'has_overtime' => 'has_overtime',
        'has_assigned_time' => 'has_assigned_time',
        'has_max_expected_time_reached' => 'has_max_expected_time_reached',
        'has_any_max_expected_reached' => 'has_any_max_expected_reached',
        'expected_time_minutes' => 'expected_time_minutes',
        'overtime_minutes' => 'overtime_minutes',
        'assigned_time_minutes' => 'assigned_time_minutes',
        'recovered_time_minutes' => 'recovered_time_minutes',
        'pto_time_minutes' => 'pto_time_minutes',
        'flextime_negative_minutes' => 'flextime_negative_minutes',
        'flextime_positive_minutes' => 'flextime_positive_minutes',
        'overtime_balance_minutes' => 'overtime_balance_minutes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_datetime' => 'setStartDatetime',
        'end_datetime' => 'setEndDatetime',
        'idle_time_minutes' => 'setIdleTimeMinutes',
        'has_exceeded_preferred_max_consecutive_workdays_limit' => 'setHasExceededPreferredMaxConsecutiveWorkdaysLimit',
        'has_scheduled_time' => 'setHasScheduledTime',
        'has_expected_time' => 'setHasExpectedTime',
        'has_overtime' => 'setHasOvertime',
        'has_assigned_time' => 'setHasAssignedTime',
        'has_max_expected_time_reached' => 'setHasMaxExpectedTimeReached',
        'has_any_max_expected_reached' => 'setHasAnyMaxExpectedReached',
        'expected_time_minutes' => 'setExpectedTimeMinutes',
        'overtime_minutes' => 'setOvertimeMinutes',
        'assigned_time_minutes' => 'setAssignedTimeMinutes',
        'recovered_time_minutes' => 'setRecoveredTimeMinutes',
        'pto_time_minutes' => 'setPtoTimeMinutes',
        'flextime_negative_minutes' => 'setFlextimeNegativeMinutes',
        'flextime_positive_minutes' => 'setFlextimePositiveMinutes',
        'overtime_balance_minutes' => 'setOvertimeBalanceMinutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_datetime' => 'getStartDatetime',
        'end_datetime' => 'getEndDatetime',
        'idle_time_minutes' => 'getIdleTimeMinutes',
        'has_exceeded_preferred_max_consecutive_workdays_limit' => 'getHasExceededPreferredMaxConsecutiveWorkdaysLimit',
        'has_scheduled_time' => 'getHasScheduledTime',
        'has_expected_time' => 'getHasExpectedTime',
        'has_overtime' => 'getHasOvertime',
        'has_assigned_time' => 'getHasAssignedTime',
        'has_max_expected_time_reached' => 'getHasMaxExpectedTimeReached',
        'has_any_max_expected_reached' => 'getHasAnyMaxExpectedReached',
        'expected_time_minutes' => 'getExpectedTimeMinutes',
        'overtime_minutes' => 'getOvertimeMinutes',
        'assigned_time_minutes' => 'getAssignedTimeMinutes',
        'recovered_time_minutes' => 'getRecoveredTimeMinutes',
        'pto_time_minutes' => 'getPtoTimeMinutes',
        'flextime_negative_minutes' => 'getFlextimeNegativeMinutes',
        'flextime_positive_minutes' => 'getFlextimePositiveMinutes',
        'overtime_balance_minutes' => 'getOvertimeBalanceMinutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('start_datetime', $data ?? [], null);
        $this->setIfExists('end_datetime', $data ?? [], null);
        $this->setIfExists('idle_time_minutes', $data ?? [], null);
        $this->setIfExists('has_exceeded_preferred_max_consecutive_workdays_limit', $data ?? [], null);
        $this->setIfExists('has_scheduled_time', $data ?? [], null);
        $this->setIfExists('has_expected_time', $data ?? [], null);
        $this->setIfExists('has_overtime', $data ?? [], null);
        $this->setIfExists('has_assigned_time', $data ?? [], null);
        $this->setIfExists('has_max_expected_time_reached', $data ?? [], null);
        $this->setIfExists('has_any_max_expected_reached', $data ?? [], null);
        $this->setIfExists('expected_time_minutes', $data ?? [], null);
        $this->setIfExists('overtime_minutes', $data ?? [], null);
        $this->setIfExists('assigned_time_minutes', $data ?? [], null);
        $this->setIfExists('recovered_time_minutes', $data ?? [], null);
        $this->setIfExists('pto_time_minutes', $data ?? [], null);
        $this->setIfExists('flextime_negative_minutes', $data ?? [], null);
        $this->setIfExists('flextime_positive_minutes', $data ?? [], null);
        $this->setIfExists('overtime_balance_minutes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['idle_time_minutes']) && ($this->container['idle_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'idle_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['expected_time_minutes']) && ($this->container['expected_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'expected_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['overtime_minutes']) && ($this->container['overtime_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'overtime_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['assigned_time_minutes']) && ($this->container['assigned_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'assigned_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['recovered_time_minutes']) && ($this->container['recovered_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'recovered_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pto_time_minutes']) && ($this->container['pto_time_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'pto_time_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['flextime_negative_minutes']) && ($this->container['flextime_negative_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'flextime_negative_minutes', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['flextime_positive_minutes']) && ($this->container['flextime_positive_minutes'] < 0)) {
            $invalidProperties[] = "invalid value for 'flextime_positive_minutes', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_datetime
     *
     * @return \DateTime|null
     */
    public function getStartDatetime()
    {
        return $this->container['start_datetime'];
    }

    /**
     * Sets start_datetime
     *
     * @param \DateTime|null $start_datetime start_datetime
     *
     * @return self
     */
    public function setStartDatetime($start_datetime)
    {
        if (is_null($start_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'start_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_datetime'] = $start_datetime;

        return $this;
    }

    /**
     * Gets end_datetime
     *
     * @return \DateTime|null
     */
    public function getEndDatetime()
    {
        return $this->container['end_datetime'];
    }

    /**
     * Sets end_datetime
     *
     * @param \DateTime|null $end_datetime end_datetime
     *
     * @return self
     */
    public function setEndDatetime($end_datetime)
    {
        if (is_null($end_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'end_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_datetime'] = $end_datetime;

        return $this;
    }

    /**
     * Gets idle_time_minutes
     *
     * @return int|null
     */
    public function getIdleTimeMinutes()
    {
        return $this->container['idle_time_minutes'];
    }

    /**
     * Sets idle_time_minutes
     *
     * @param int|null $idle_time_minutes idle_time_minutes
     *
     * @return self
     */
    public function setIdleTimeMinutes($idle_time_minutes)
    {
        if (is_null($idle_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'idle_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idle_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($idle_time_minutes) && ($idle_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $idle_time_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['idle_time_minutes'] = $idle_time_minutes;

        return $this;
    }

    /**
     * Gets has_exceeded_preferred_max_consecutive_workdays_limit
     *
     * @return bool|null
     */
    public function getHasExceededPreferredMaxConsecutiveWorkdaysLimit()
    {
        return $this->container['has_exceeded_preferred_max_consecutive_workdays_limit'];
    }

    /**
     * Sets has_exceeded_preferred_max_consecutive_workdays_limit
     *
     * @param bool|null $has_exceeded_preferred_max_consecutive_workdays_limit has_exceeded_preferred_max_consecutive_workdays_limit
     *
     * @return self
     */
    public function setHasExceededPreferredMaxConsecutiveWorkdaysLimit($has_exceeded_preferred_max_consecutive_workdays_limit)
    {
        if (is_null($has_exceeded_preferred_max_consecutive_workdays_limit)) {
            array_push($this->openAPINullablesSetToNull, 'has_exceeded_preferred_max_consecutive_workdays_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_exceeded_preferred_max_consecutive_workdays_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_exceeded_preferred_max_consecutive_workdays_limit'] = $has_exceeded_preferred_max_consecutive_workdays_limit;

        return $this;
    }

    /**
     * Gets has_scheduled_time
     *
     * @return bool|null
     */
    public function getHasScheduledTime()
    {
        return $this->container['has_scheduled_time'];
    }

    /**
     * Sets has_scheduled_time
     *
     * @param bool|null $has_scheduled_time has_scheduled_time
     *
     * @return self
     */
    public function setHasScheduledTime($has_scheduled_time)
    {
        if (is_null($has_scheduled_time)) {
            array_push($this->openAPINullablesSetToNull, 'has_scheduled_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_scheduled_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_scheduled_time'] = $has_scheduled_time;

        return $this;
    }

    /**
     * Gets has_expected_time
     *
     * @return bool|null
     */
    public function getHasExpectedTime()
    {
        return $this->container['has_expected_time'];
    }

    /**
     * Sets has_expected_time
     *
     * @param bool|null $has_expected_time has_expected_time
     *
     * @return self
     */
    public function setHasExpectedTime($has_expected_time)
    {
        if (is_null($has_expected_time)) {
            array_push($this->openAPINullablesSetToNull, 'has_expected_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_expected_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_expected_time'] = $has_expected_time;

        return $this;
    }

    /**
     * Gets has_overtime
     *
     * @return bool|null
     */
    public function getHasOvertime()
    {
        return $this->container['has_overtime'];
    }

    /**
     * Sets has_overtime
     *
     * @param bool|null $has_overtime has_overtime
     *
     * @return self
     */
    public function setHasOvertime($has_overtime)
    {
        if (is_null($has_overtime)) {
            array_push($this->openAPINullablesSetToNull, 'has_overtime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_overtime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_overtime'] = $has_overtime;

        return $this;
    }

    /**
     * Gets has_assigned_time
     *
     * @return bool|null
     */
    public function getHasAssignedTime()
    {
        return $this->container['has_assigned_time'];
    }

    /**
     * Sets has_assigned_time
     *
     * @param bool|null $has_assigned_time has_assigned_time
     *
     * @return self
     */
    public function setHasAssignedTime($has_assigned_time)
    {
        if (is_null($has_assigned_time)) {
            array_push($this->openAPINullablesSetToNull, 'has_assigned_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_assigned_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_assigned_time'] = $has_assigned_time;

        return $this;
    }

    /**
     * Gets has_max_expected_time_reached
     *
     * @return bool|null
     */
    public function getHasMaxExpectedTimeReached()
    {
        return $this->container['has_max_expected_time_reached'];
    }

    /**
     * Sets has_max_expected_time_reached
     *
     * @param bool|null $has_max_expected_time_reached has_max_expected_time_reached
     *
     * @return self
     */
    public function setHasMaxExpectedTimeReached($has_max_expected_time_reached)
    {
        if (is_null($has_max_expected_time_reached)) {
            array_push($this->openAPINullablesSetToNull, 'has_max_expected_time_reached');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_max_expected_time_reached', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_max_expected_time_reached'] = $has_max_expected_time_reached;

        return $this;
    }

    /**
     * Gets has_any_max_expected_reached
     *
     * @return bool|null
     */
    public function getHasAnyMaxExpectedReached()
    {
        return $this->container['has_any_max_expected_reached'];
    }

    /**
     * Sets has_any_max_expected_reached
     *
     * @param bool|null $has_any_max_expected_reached has_any_max_expected_reached
     *
     * @return self
     */
    public function setHasAnyMaxExpectedReached($has_any_max_expected_reached)
    {
        if (is_null($has_any_max_expected_reached)) {
            array_push($this->openAPINullablesSetToNull, 'has_any_max_expected_reached');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_any_max_expected_reached', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_any_max_expected_reached'] = $has_any_max_expected_reached;

        return $this;
    }

    /**
     * Gets expected_time_minutes
     *
     * @return int|null
     */
    public function getExpectedTimeMinutes()
    {
        return $this->container['expected_time_minutes'];
    }

    /**
     * Sets expected_time_minutes
     *
     * @param int|null $expected_time_minutes expected_time_minutes
     *
     * @return self
     */
    public function setExpectedTimeMinutes($expected_time_minutes)
    {
        if (is_null($expected_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'expected_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expected_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($expected_time_minutes) && ($expected_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $expected_time_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['expected_time_minutes'] = $expected_time_minutes;

        return $this;
    }

    /**
     * Gets overtime_minutes
     *
     * @return int|null
     */
    public function getOvertimeMinutes()
    {
        return $this->container['overtime_minutes'];
    }

    /**
     * Sets overtime_minutes
     *
     * @param int|null $overtime_minutes overtime_minutes
     *
     * @return self
     */
    public function setOvertimeMinutes($overtime_minutes)
    {
        if (is_null($overtime_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'overtime_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overtime_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($overtime_minutes) && ($overtime_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $overtime_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['overtime_minutes'] = $overtime_minutes;

        return $this;
    }

    /**
     * Gets assigned_time_minutes
     *
     * @return int|null
     */
    public function getAssignedTimeMinutes()
    {
        return $this->container['assigned_time_minutes'];
    }

    /**
     * Sets assigned_time_minutes
     *
     * @param int|null $assigned_time_minutes assigned_time_minutes
     *
     * @return self
     */
    public function setAssignedTimeMinutes($assigned_time_minutes)
    {
        if (is_null($assigned_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'assigned_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assigned_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($assigned_time_minutes) && ($assigned_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $assigned_time_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['assigned_time_minutes'] = $assigned_time_minutes;

        return $this;
    }

    /**
     * Gets recovered_time_minutes
     *
     * @return int|null
     */
    public function getRecoveredTimeMinutes()
    {
        return $this->container['recovered_time_minutes'];
    }

    /**
     * Sets recovered_time_minutes
     *
     * @param int|null $recovered_time_minutes recovered_time_minutes
     *
     * @return self
     */
    public function setRecoveredTimeMinutes($recovered_time_minutes)
    {
        if (is_null($recovered_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'recovered_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recovered_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($recovered_time_minutes) && ($recovered_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $recovered_time_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['recovered_time_minutes'] = $recovered_time_minutes;

        return $this;
    }

    /**
     * Gets pto_time_minutes
     *
     * @return int|null
     */
    public function getPtoTimeMinutes()
    {
        return $this->container['pto_time_minutes'];
    }

    /**
     * Sets pto_time_minutes
     *
     * @param int|null $pto_time_minutes pto_time_minutes
     *
     * @return self
     */
    public function setPtoTimeMinutes($pto_time_minutes)
    {
        if (is_null($pto_time_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'pto_time_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pto_time_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pto_time_minutes) && ($pto_time_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $pto_time_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['pto_time_minutes'] = $pto_time_minutes;

        return $this;
    }

    /**
     * Gets flextime_negative_minutes
     *
     * @return int|null
     */
    public function getFlextimeNegativeMinutes()
    {
        return $this->container['flextime_negative_minutes'];
    }

    /**
     * Sets flextime_negative_minutes
     *
     * @param int|null $flextime_negative_minutes flextime_negative_minutes
     *
     * @return self
     */
    public function setFlextimeNegativeMinutes($flextime_negative_minutes)
    {
        if (is_null($flextime_negative_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'flextime_negative_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flextime_negative_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($flextime_negative_minutes) && ($flextime_negative_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $flextime_negative_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['flextime_negative_minutes'] = $flextime_negative_minutes;

        return $this;
    }

    /**
     * Gets flextime_positive_minutes
     *
     * @return int|null
     */
    public function getFlextimePositiveMinutes()
    {
        return $this->container['flextime_positive_minutes'];
    }

    /**
     * Sets flextime_positive_minutes
     *
     * @param int|null $flextime_positive_minutes flextime_positive_minutes
     *
     * @return self
     */
    public function setFlextimePositiveMinutes($flextime_positive_minutes)
    {
        if (is_null($flextime_positive_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'flextime_positive_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flextime_positive_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($flextime_positive_minutes) && ($flextime_positive_minutes < 0)) {
            throw new \InvalidArgumentException('invalid value for $flextime_positive_minutes when calling DayMetrics., must be bigger than or equal to 0.');
        }

        $this->container['flextime_positive_minutes'] = $flextime_positive_minutes;

        return $this;
    }

    /**
     * Gets overtime_balance_minutes
     *
     * @return int|null
     */
    public function getOvertimeBalanceMinutes()
    {
        return $this->container['overtime_balance_minutes'];
    }

    /**
     * Sets overtime_balance_minutes
     *
     * @param int|null $overtime_balance_minutes overtime_balance_minutes
     *
     * @return self
     */
    public function setOvertimeBalanceMinutes($overtime_balance_minutes)
    {
        if (is_null($overtime_balance_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'overtime_balance_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overtime_balance_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overtime_balance_minutes'] = $overtime_balance_minutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


