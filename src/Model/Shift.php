<?php
/**
 * Shift
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pristime Workforce Scheduling API
 *
 * ## Pristime Workforce Scheduling API          The Pristime Scheduling API lets clients provide workers, shifts,         and constraints, and returns optimized schedules.          ## Authentication          All endpoints require an API key in the `Pristime-API-Key` header.          ## Support          For technical support, contact us at antoine.hachez@pristime.com
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: antoine.hachez@pristime.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PristimeSdk\Model;

use \ArrayAccess;
use \PristimeSdk\ObjectSerializer;

/**
 * Shift Class Doc Comment
 *
 * @category Class
 * @description Represents a work shift that can be assigned to workers during scheduling optimization.  A shift defines a specific time period requiring worker coverage, including timing, location, required skills, break periods, and assignment status. Shifts can be: - **Unassigned**: Need a worker (will be optimally assigned) - **Pre-assigned**: Already have a worker but can be reassigned if beneficial - **Locked**: Have a worker and cannot be changed  **Day Assignment Rules for Night Shifts:** - The entire shift is associated with the day it **starts**, not when it ends - Uses the &#x60;day_boundary_offset_minutes&#x60; parameter for custom day boundaries - Example: Night shift 22:00 Monday â†’ 06:00 Tuesday is a \&quot;Monday shift\&quot; - Workers with Monday availability can work this shift even if unavailable Tuesday  **Timing Conventions:** - Start time is included, end time is excluded [start_time, end_time) - All times must be whole minutes (no seconds or milliseconds) - Break periods are subtracted from total time to get actual work duration  **Assignment Optimization:** - Skills matching (worker must have all required skills) - Availability checking (no conflicts with unavailable periods) - Cost/revenue optimization (considers worker rates and shift value) - Constraint satisfaction (respects break requirements, consecutive day limits, etc.)
 * @package  PristimeSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Shift implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Shift';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_datetime' => '\DateTime',
        'end_datetime' => '\DateTime',
        'timezone' => 'string',
        'id' => 'string',
        'label' => 'string',
        'revenues' => '\PristimeSdk\Model\ShiftRevenues',
        'revenue' => 'int',
        'breaks' => '\PristimeSdk\Model\Period[]',
        'tags' => 'string[]',
        'required_skills' => 'string[]',
        'assignment' => '\PristimeSdk\Model\ShiftAssignment',
        'preceding_shift_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_datetime' => 'date-time',
        'end_datetime' => 'date-time',
        'timezone' => null,
        'id' => null,
        'label' => null,
        'revenues' => null,
        'revenue' => null,
        'breaks' => null,
        'tags' => null,
        'required_skills' => null,
        'assignment' => null,
        'preceding_shift_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_datetime' => false,
        'end_datetime' => false,
        'timezone' => false,
        'id' => true,
        'label' => true,
        'revenues' => false,
        'revenue' => false,
        'breaks' => false,
        'tags' => false,
        'required_skills' => false,
        'assignment' => false,
        'preceding_shift_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_datetime' => 'start_datetime',
        'end_datetime' => 'end_datetime',
        'timezone' => 'timezone',
        'id' => 'id',
        'label' => 'label',
        'revenues' => 'revenues',
        'revenue' => 'revenue',
        'breaks' => 'breaks',
        'tags' => 'tags',
        'required_skills' => 'required_skills',
        'assignment' => 'assignment',
        'preceding_shift_id' => 'preceding_shift_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_datetime' => 'setStartDatetime',
        'end_datetime' => 'setEndDatetime',
        'timezone' => 'setTimezone',
        'id' => 'setId',
        'label' => 'setLabel',
        'revenues' => 'setRevenues',
        'revenue' => 'setRevenue',
        'breaks' => 'setBreaks',
        'tags' => 'setTags',
        'required_skills' => 'setRequiredSkills',
        'assignment' => 'setAssignment',
        'preceding_shift_id' => 'setPrecedingShiftId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_datetime' => 'getStartDatetime',
        'end_datetime' => 'getEndDatetime',
        'timezone' => 'getTimezone',
        'id' => 'getId',
        'label' => 'getLabel',
        'revenues' => 'getRevenues',
        'revenue' => 'getRevenue',
        'breaks' => 'getBreaks',
        'tags' => 'getTags',
        'required_skills' => 'getRequiredSkills',
        'assignment' => 'getAssignment',
        'preceding_shift_id' => 'getPrecedingShiftId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('start_datetime', $data ?? [], null);
        $this->setIfExists('end_datetime', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('revenues', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], 0);
        $this->setIfExists('breaks', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('required_skills', $data ?? [], null);
        $this->setIfExists('assignment', $data ?? [], null);
        $this->setIfExists('preceding_shift_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_datetime'] === null) {
            $invalidProperties[] = "'start_datetime' can't be null";
        }
        if ($this->container['end_datetime'] === null) {
            $invalidProperties[] = "'end_datetime' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_datetime
     *
     * @return \DateTime
     */
    public function getStartDatetime()
    {
        return $this->container['start_datetime'];
    }

    /**
     * Sets start_datetime
     *
     * @param \DateTime $start_datetime Beginning of the time period (inclusive). This exact moment is included in the period. Must be rounded to the nearest minute for scheduling precision.
     *
     * @return self
     */
    public function setStartDatetime($start_datetime)
    {
        if (is_null($start_datetime)) {
            throw new \InvalidArgumentException('non-nullable start_datetime cannot be null');
        }
        $this->container['start_datetime'] = $start_datetime;

        return $this;
    }

    /**
     * Gets end_datetime
     *
     * @return \DateTime
     */
    public function getEndDatetime()
    {
        return $this->container['end_datetime'];
    }

    /**
     * Sets end_datetime
     *
     * @param \DateTime $end_datetime End of the time period (exclusive). This exact moment is NOT included in the period, allowing periods to be adjacent without overlap. Must be rounded to the nearest minute.
     *
     * @return self
     */
    public function setEndDatetime($end_datetime)
    {
        if (is_null($end_datetime)) {
            throw new \InvalidArgumentException('non-nullable end_datetime cannot be null');
        }
        $this->container['end_datetime'] = $end_datetime;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone for interpreting start_datetime and end_datetime
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets revenues
     *
     * @return \PristimeSdk\Model\ShiftRevenues|null
     */
    public function getRevenues()
    {
        return $this->container['revenues'];
    }

    /**
     * Sets revenues
     *
     * @param \PristimeSdk\Model\ShiftRevenues|null $revenues revenues
     *
     * @return self
     */
    public function setRevenues($revenues)
    {
        if (is_null($revenues)) {
            throw new \InvalidArgumentException('non-nullable revenues cannot be null');
        }
        $this->container['revenues'] = $revenues;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return int|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param int|null $revenue Additional fixed revenue value for this specific shift, added to calculated hourly revenues.
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            throw new \InvalidArgumentException('non-nullable revenue cannot be null');
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets breaks
     *
     * @return \PristimeSdk\Model\Period[]|null
     */
    public function getBreaks()
    {
        return $this->container['breaks'];
    }

    /**
     * Sets breaks
     *
     * @param \PristimeSdk\Model\Period[]|null $breaks Unpaid break periods during the shift (lunch, rest breaks). Breaks are subtracted from total shift duration to calculate actual work time. Must be entirely within the shift timeframe.
     *
     * @return self
     */
    public function setBreaks($breaks)
    {
        if (is_null($breaks)) {
            throw new \InvalidArgumentException('non-nullable breaks cannot be null');
        }
        $this->container['breaks'] = $breaks;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Descriptive labels for the shift type, location, or characteristics. Used to match shifts with demand requirements.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }


        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets required_skills
     *
     * @return string[]|null
     */
    public function getRequiredSkills()
    {
        return $this->container['required_skills'];
    }

    /**
     * Sets required_skills
     *
     * @param string[]|null $required_skills Skills, certifications, or qualifications that a worker must possess to be assigned to this shift. Workers without these skills will be ineligible.
     *
     * @return self
     */
    public function setRequiredSkills($required_skills)
    {
        if (is_null($required_skills)) {
            throw new \InvalidArgumentException('non-nullable required_skills cannot be null');
        }


        $this->container['required_skills'] = $required_skills;

        return $this;
    }

    /**
     * Gets assignment
     *
     * @return \PristimeSdk\Model\ShiftAssignment|null
     */
    public function getAssignment()
    {
        return $this->container['assignment'];
    }

    /**
     * Sets assignment
     *
     * @param \PristimeSdk\Model\ShiftAssignment|null $assignment assignment
     *
     * @return self
     */
    public function setAssignment($assignment)
    {
        if (is_null($assignment)) {
            throw new \InvalidArgumentException('non-nullable assignment cannot be null');
        }
        $this->container['assignment'] = $assignment;

        return $this;
    }

    /**
     * Gets preceding_shift_id
     *
     * @return string|null
     */
    public function getPrecedingShiftId()
    {
        return $this->container['preceding_shift_id'];
    }

    /**
     * Sets preceding_shift_id
     *
     * @param string|null $preceding_shift_id preceding_shift_id
     *
     * @return self
     */
    public function setPrecedingShiftId($preceding_shift_id)
    {
        if (is_null($preceding_shift_id)) {
            array_push($this->openAPINullablesSetToNull, 'preceding_shift_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preceding_shift_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preceding_shift_id'] = $preceding_shift_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


